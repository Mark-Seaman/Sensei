[
    {
        "fields": {
            "expected": "no output",
            "name": "vc-pull",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 1
    },
    {
        "fields": {
            "expected": "no output",
            "name": "vc-status",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 2
    },
    {
        "fields": {
            "expected": "email: mark@shrinking-world.com, company: Shrinking World, user: Mark Seaman    \nemail: stacie@shrinking-world.com, company: Shrinking World, user: Stacie Seaman  ",
            "name": "text-agents",
            "output": "email: mark@shrinking-world.com, company: Shrinking World, user: Mark Seaman    \nemail: stacie@shrinking-world.com, company: Shrinking World, user: Stacie Seaman  "
        },
        "model": "tool.test",
        "pk": 3
    },
    {
        "fields": {
            "expected": "[('http://example.com', 'More Examples'), ('http://example2.com', 'Even More Examples')]",
            "name": "text-anchors",
            "output": "[('http://example.com', 'More Examples'), ('http://example2.com', 'Even More Examples')]"
        },
        "model": "tool.test",
        "pk": 4
    },
    {
        "fields": {
            "expected": "<p></p>",
            "name": "text-div",
            "output": "<p></p>"
        },
        "model": "tool.test",
        "pk": 5
    },
    {
        "fields": {
            "expected": "### fix\n### test\n### extend\n### improve",
            "name": "text-findall",
            "output": "### fix\n### test\n### extend\n### improve"
        },
        "model": "tool.test",
        "pk": 6
    },
    {
        "fields": {
            "expected": "Work Activities\n    * These activities are critical to successful work.\n    * Balance the four activities for the best outcomes.\n    * This is a second paragraph\n    * of text.\n    Learn\n        * create deeper understanding of problem\n        * evaluate solution\n\n    Plan\n        * past history\n        * present tasks\n        * future priorities\n\n    Build\n        fix\n            list of known problems\n\n            issue tracking\n\n        test\n            test inventory\n\n            tests needed\n\n        extend\n\n        improve\n\n    Teach\n        * share what you know\n        * invite review\n",
            "name": "text-format",
            "output": "Work Activities\n    * These activities are critical to successful work.\n    * Balance the four activities for the best outcomes.\n    * This is a second paragraph\n    * of text.\n    Learn\n        * create deeper understanding of problem\n        * evaluate solution\n\n    Plan\n        * past history\n        * present tasks\n        * future priorities\n\n    Build\n        fix\n            list of known problems\n\n            issue tracking\n\n        test\n            test inventory\n\n            tests needed\n\n        extend\n\n        improve\n\n    Teach\n        * share what you know\n        * invite review\n"
        },
        "model": "tool.test",
        "pk": 7
    },
    {
        "fields": {
            "expected": "text_command\ntext_help\nfind_agents\nfind_anchors\nfind_classes\nfind_functions\nfind_links\nfind_quotes\nfind_signatures\nfind_urls\nmarkdown_list_links\nmarkdown_list_string\ntext_join\ntext_lines\ntext_match\ntext_no_match\ntext_outline\ntext_outline_string\ntext_markdown\ntext_replace\ntext_title\ntext_body\nmatch_lines\nmatch_pattern\ntransform_matches",
            "name": "text-functions",
            "output": "text_command\ntext_help\nfind_agents\nfind_anchors\nfind_classes\nfind_functions\nfind_links\nfind_quotes\nfind_signatures\nfind_urls\nmarkdown_list_links\nmarkdown_list_string\ntext_join\ntext_lines\ntext_match\ntext_no_match\ntext_outline\ntext_outline_string\ntext_markdown\ntext_replace\ntext_title\ntext_body\nmatch_lines\nmatch_pattern\ntransform_matches"
        },
        "model": "tool.test",
        "pk": 8
    },
    {
        "fields": {
            "expected": "### fix\n#### list of known problems\n#### issue tracking\n### test\n#### test inventory\n#### tests needed\n### extend\n### improve",
            "name": "text-grep",
            "output": "### fix\n#### list of known problems\n#### issue tracking\n### test\n#### test inventory\n#### tests needed\n### extend\n### improve"
        },
        "model": "tool.test",
        "pk": 9
    },
    {
        "fields": {
            "expected": "\n        text Command\n\n        usage: x text COMMAND\n\n        COMMAND:\n\n            match - show lines that match\n            no_match - show lines that don't match\n            replace - replace lines\n            select - pattern matching in doc\n\n        \n",
            "name": "text-help",
            "output": "\n        text Command\n\n        usage: x text COMMAND\n\n        COMMAND:\n\n            match - show lines that match\n            no_match - show lines that don't match\n            replace - replace lines\n            select - pattern matching in doc\n\n        \n"
        },
        "model": "tool.test",
        "pk": 10
    },
    {
        "fields": {
            "expected": "[('http://example.com', 'More Examples'), ('http://example2.com', 'Even More Examples')]",
            "name": "text-links",
            "output": "[('http://example.com', 'More Examples'), ('http://example2.com', 'Even More Examples')]"
        },
        "model": "tool.test",
        "pk": 11
    },
    {
        "fields": {
            "expected": "# Work Activities\n\nThese activities are critical to successful work.\nBalance the four activities for the best outcomes.\n\nThis is a second paragraph\nof text.\n\n## Learn\n\ncreate deeper understanding of problem\nevaluate solution\n\n## Plan\n\npast history\npresent tasks\nfuture priorities\n\n## Build\n\n### fix\n\n#### list of known problems\n\n#### issue tracking\n\n### test\n\n#### test inventory\n\n#### tests needed\n\n### extend\n\n### improve\n\n## Teach\n\nshare what you know\ninvite review\n",
            "name": "text-markdown",
            "output": "# Work Activities\n\nThese activities are critical to successful work.\nBalance the four activities for the best outcomes.\n\nThis is a second paragraph\nof text.\n\n## Learn\n\ncreate deeper understanding of problem\nevaluate solution\n\n## Plan\n\npast history\npresent tasks\nfuture priorities\n\n## Build\n\n### fix\n\n#### list of known problems\n\n#### issue tracking\n\n### test\n\n#### test inventory\n\n#### tests needed\n\n### extend\n\n### improve\n\n## Teach\n\nshare what you know\ninvite review\n"
        },
        "model": "tool.test",
        "pk": 12
    },
    {
        "fields": {
            "expected": "shell(x text match def mybook/mybook_views.py) --> 2 lines (should be between 12 and 15)",
            "name": "text-match",
            "output": "shell(x text match def mybook/mybook_views.py) --> 2 lines (should be between 12 and 15)"
        },
        "model": "tool.test",
        "pk": 13
    },
    {
        "fields": {
            "expected": "no output",
            "name": "text-no-match",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 14
    },
    {
        "fields": {
            "expected": "[['Work Activities', [['Learn', [], ['create deeper understanding of problem', 'evaluate solution', '']], ['Plan', [], ['past history', 'present tasks', 'future priorities', '']], ['Build', [['fix', [['list of known problems', [], []], ['issue tracking', [], []]], []], ['test', [['test inventory', [], []], ['tests needed', [], []]], []], ['extend', [], []], ['improve', [], ['']]], []], ['Teach', [], ['share what you know', 'invite review', '', '    ']]], ['', 'These activities are critical to successful work.', 'Balance the four activities for the best outcomes.', '', 'This is a second paragraph', 'of text.', '']]]",
            "name": "text-outline",
            "output": "[['Work Activities', [['Learn', [], ['create deeper understanding of problem', 'evaluate solution', '']], ['Plan', [], ['past history', 'present tasks', 'future priorities', '']], ['Build', [['fix', [['list of known problems', [], []], ['issue tracking', [], []]], []], ['test', [['test inventory', [], []], ['tests needed', [], []]], []], ['extend', [], []], ['improve', [], ['']]], []], ['Teach', [], ['share what you know', 'invite review', '', '    ']]], ['', 'These activities are critical to successful work.', 'Balance the four activities for the best outcomes.', '', 'This is a second paragraph', 'of text.', '']]]"
        },
        "model": "tool.test",
        "pk": 15
    },
    {
        "fields": {
            "expected": "0a1\n> \n10d10\n< \n15d14\n< \n21d19\n< \n23d20\n< \n25d21\n< \n27d22\n< \n29d23\n< \n31d24\n< \n33d25\n< \n35d26\n< \n39d29\n< \n42a33\n>     \n",
            "name": "text-round-trip",
            "output": "0a1\n> \n10d10\n< \n15d14\n< \n21d19\n< \n23d20\n< \n25d21\n< \n27d22\n< \n29d23\n< \n31d24\n< \n33d25\n< \n35d26\n< \n39d29\n< \n42a33\n>     \n"
        },
        "model": "tool.test",
        "pk": 16
    },
    {
        "fields": {
            "expected": "<h3>fix</h3>\n<h3>test</h3>\n<h3>extend</h3>\n<h3>improve</h3>",
            "name": "text-select-lines",
            "output": "<h3>fix</h3>\n<h3>test</h3>\n<h3>extend</h3>\n<h3>improve</h3>"
        },
        "model": "tool.test",
        "pk": 17
    },
    {
        "fields": {
            "expected": " text_command(options)\n text_help(args=None)\n find_agents(text)\n find_anchors(text)\n find_classes(text)\n find_functions(text)\n find_links(text)\n     link(anchor)\n find_quotes(text)\n find_signatures(text)\n    pattern = r'(.*\\(.*\\))'\n find_urls(text)\n markdown_list_links(host, lines)\n markdown_list_string(mylist)\n text_join(text)\n text_lines(text)\n text_match(match_pattern, doc)\n text_no_match(match_pattern, doc)\n text_outline(text)\n text_outline_string(outline, depth=0)\n text_markdown(outline, depth=1)\n     text_body(lines)\n text_replace(doc, match_pattern, replace_pattern)\n text_title(text)\n text_body(text)\n match_lines(text, pattern)\n match_pattern(text, pattern)\n transform_matches(text, match_pattern, select_pattern)",
            "name": "text-signatures",
            "output": " text_command(options)\n text_help(args=None)\n find_agents(text)\n find_anchors(text)\n find_classes(text)\n find_functions(text)\n find_links(text)\n     link(anchor)\n find_quotes(text)\n find_signatures(text)\n    pattern = r'(.*\\(.*\\))'\n find_urls(text)\n markdown_list_links(host, lines)\n markdown_list_string(mylist)\n text_join(text)\n text_lines(text)\n text_match(match_pattern, doc)\n text_no_match(match_pattern, doc)\n text_outline(text)\n text_outline_string(outline, depth=0)\n text_markdown(outline, depth=1)\n     text_body(lines)\n text_replace(doc, match_pattern, replace_pattern)\n text_title(text)\n text_body(text)\n match_lines(text, pattern)\n match_pattern(text, pattern)\n transform_matches(text, match_pattern, select_pattern)"
        },
        "model": "tool.test",
        "pk": 18
    },
    {
        "fields": {
            "expected": "http://example.com\nhttp://example2.com",
            "name": "text-url",
            "output": "http://example.com\nhttp://example2.com"
        },
        "model": "tool.test",
        "pk": 19
    },
    {
        "fields": {
            "expected": "bin/__init__.py\n    \nbin/app.py\n    \nbin/booknotes.py\n    \nbin/chapter.py\n    \nbin/data.py\n    \nbin/days.py\n    \nbin/diagrams.py\n    \nbin/doc.py\n    \nbin/files.py\n    \nbin/hourly.py\n    \nbin/hours.py\n    \nbin/i.py\n    \nbin/life.py\n    \nbin/log.py\n    \nbin/music.py\n    \nbin/n.py\n    \nbin/ntsh.py\n    \nbin/ops.py\n    \nbin/pandoc.py\n    \nbin/resize.py\n    \nbin/shell.py\n    \nbin/switches.py\n    \nbin/text.py\n        pattern = r'class (.*)\\(.*\\)'\nbin/todo.py\n    \nbin/tool.py\n    \nbin/user.py\n    \nbin/vc.py\n    \nbin/web.py\n    \nbin/wordpress.py\n    \nbin/x.py\n    \nhammer/__init__.py\n    \nhammer/secret_settings.py\n    \nhammer/settings.py\n    \nhammer/urls.py\n    \nhammer/wsgi.py\n    \nhealth/__init__.py\n    \nhealth/admin.py\n    \nhealth/apps.py\n    class HealthConfig(AppConfig):\nhealth/health.py\n    \nhealth/models.py\n    class HealthScore(models.Model):\nhealth/tests.py\n    \nhealth/urls.py\n    \nhealth/views.py\n    class HealthView(TemplateView):\n    class HealthList(ListView):\n    class HealthEdit(UpdateView):\nlife/__init__.py\n    \nlife/admin.py\n    \nlife/apps.py\n    class LifeConfig(AppConfig):\nlife/life.py\n    \nlife/models.py\n    class Year(models.Model):\n    class Aspect(models.Model):\n    class Experience(models.Model):\nlife/tests.py\n    \nlife/urls.py\n    \nlife/views.py\n    class LifeView(TemplateView):\n    class ExperienceView(ListView):\n    class YearView(ListView):\n    class LifeAdd(LoginRequiredMixin, RedirectView):\n    class LifeEdit(UpdateView):\nmybook/__init__.py\n    \nmybook/admin.py\n    \nmybook/apps.py\n    class MybookConfig(AppConfig):\nmybook/models.py\n    class Author(models.Model):\n    class Book(models.Model):\nmybook/mybook.py\n    \nmybook/mybook_views.py\n    class MyBookDocDisplay(TemplateView):\n    class MyBookPrivateDoc(LoginRequiredMixin, MyBookDocDisplay):\n    class BookNotes(MyBookDocDisplay):\n    class CardView(MyBookDocDisplay):\n    class OutlineView(MyBookDocDisplay):\n    class DailyTask(RedirectView):\n    # class SeamansLog(MyBookDocDisplay):\n    class SeamansLog(RedirectView):\n    class SpiritualSelect(RedirectView):\n    class TabsView(MyBookDocDisplay):\nmybook/outline.py\n    \nmybook/task.py\n    \nmybook/tests.py\n    \nmybook/urls.py\n    \nsensei/__init__.py\n    \nsensei/admin.py\n    \nsensei/apps.py\n    class SenseiConfig(AppConfig):\nsensei/models.py\n    class Course(models.Model):\n    class Student(models.Model):\n    class Lesson(models.Model):\n    class Review(models.Model):\nsensei/review.py\n    \nsensei/sensei.py\n    \nsensei/student.py\n    \nsensei/tests.py\n    \nsensei/urls.py\n    \nsensei/views.py\n    class UncDocDisplay(TemplateView):\n    class UncReading(TemplateView):\n    class UncRegister(FormView):\n        class EditDocForm(Form):\n    class UncRegistered(ListView):\n    class UncSlidesDisplay(TemplateView):\n    class UncStudent(TemplateView):\nsuperuser/__init__.py\n    \nsuperuser/admin.py\n    \nsuperuser/admin_views.py\n    class AdminView(UserPassesTestMixin, TemplateView):\n    class DatabaseView(UserPassesTestMixin, TemplateView):\n    class DocView(UserPassesTestMixin, TemplateView):\n    class LogView(UserPassesTestMixin, TemplateView):\n    class MaterialView(TemplateView):\n    class SurrogateView(UserPassesTestMixin, TemplateView):\n    class TestView(UserPassesTestMixin, ListView):\n    class UsersView(UserPassesTestMixin, ListView):\nsuperuser/apps.py\n    class AdminConfig(AppConfig):\nsuperuser/initialize.py\n    \nsuperuser/models.py\n    class Administrator(models.Model):\nsuperuser/tests.py\n    \nsuperuser/urls.py\n    \ntasks/__init__.py\n    \ntasks/models.py\n    class Task (models.Model):\ntasks/summary.py\n    \ntasks/task.py\n    \ntasks/urls.py\n    \ntasks/views.py\n    class TaskBase(LoginRequiredMixin, ContextMixin):\n    class TaskDelete(DeleteView):\n    class TaskDetail(DetailView):\n    class TaskCreate(CreateView):\n    class TaskUpdate(TaskBase, UpdateView):\n    class TaskHome(TaskBase, TemplateView):\n    class TaskList(TaskBase, ListView):\n    class MyTime(TaskBase, TemplateView):\n    class TimeSummary(TaskBase, TemplateView):\n    class MissingDays(TaskBase, TemplateView):\n    class TaskImport(RedirectView):\n    class TaskExport(TaskBase, TemplateView):\ntest/__init__.py\n    \ntest/app_test.py\n    \ntest/archive_test.py\n    \ntest/booknotes_test.py\n    \ntest/css_test.py\n    \ntest/data_test.py\n    \ntest/doc_test.py\n    \ntest/health_test.py\n    \ntest/hourly_test.py\n    \ntest/i_test.py\n    \ntest/log_test.py\n    \ntest/ops_test.py\n    \ntest/page_test.py\n    \ntest/robot_test.py\n    \ntest/system_test.py\n    \ntest/text_test.py\n    \ntest/tst_test.py\n    \ntest/unc_test.py\n    \ntest/user_test.py\n    \ntest/vc_test.py\n    \ntest/wordpress_test.py\n    \ntool/__init__.py\n    \ntool/document.py\n    \ntool/domain.py\n    \ntool/email.py\n    \ntool/log.py\n    \ntool/management/__init__.py\n    \ntool/management/commands/__init__.py\n    \ntool/management/commands/scriptor.py\n    class Command(BaseCommand):\ntool/models.py\n    class Test(models.Model):\n    class Page(models.Model):\ntool/notify.py\n    \ntool/page.py\n    \ntool/project.py\n    class ProjectList(ListView):\n    class ProjectDetail(DetailView):\n    class ProjectCreate(CreateView):\n    class ProjectUpdate(UpdateView):\n    class ProjectDelete(DeleteView):\ntool/robot.py\n    \ntool/tst.py\n    \ntool/urls.py\n    \ntool/user.py\n    \ntool/user_views.py\n    class UserList(ListView):\n    class UserCreate(CreateView):\n    class UserDetail(DetailView):\n    class UserEdit(UpdateView):\n    class UserDelete(DeleteView):\n",
            "name": "app-classes",
            "output": "bin/__init__.py\n    \nbin/app.py\n    \nbin/booknotes.py\n    \nbin/chapter.py\n    \nbin/data.py\n    \nbin/days.py\n    \nbin/diagrams.py\n    \nbin/doc.py\n    \nbin/files.py\n    \nbin/hourly.py\n    \nbin/hours.py\n    \nbin/i.py\n    \nbin/life.py\n    \nbin/log.py\n    \nbin/music.py\n    \nbin/n.py\n    \nbin/ntsh.py\n    \nbin/ops.py\n    \nbin/resize.py\n    \nbin/shell.py\n    \nbin/switches.py\n    \nbin/text.py\n        pattern = r'class (.*)\\(.*\\)'\nbin/todo.py\n    \nbin/tool.py\n    \nbin/user.py\n    \nbin/vc.py\n    \nbin/web.py\n    \nbin/wordpress.py\n    \nbin/x.py\n    \nhammer/__init__.py\n    \nhammer/secret_settings.py\n    \nhammer/settings.py\n    \nhammer/urls.py\n    \nhammer/wsgi.py\n    \nhealth/__init__.py\n    \nhealth/admin.py\n    \nhealth/apps.py\n    class HealthConfig(AppConfig):\nhealth/health.py\n    \nhealth/models.py\n    class HealthScore(models.Model):\nhealth/tests.py\n    \nhealth/urls.py\n    \nhealth/views.py\n    class HealthView(TemplateView):\n    class HealthList(ListView):\n    class HealthEdit(UpdateView):\nlife/__init__.py\n    \nlife/admin.py\n    \nlife/apps.py\n    class LifeConfig(AppConfig):\nlife/life.py\n    \nlife/models.py\n    class Year(models.Model):\n    class Aspect(models.Model):\n    class Experience(models.Model):\nlife/tests.py\n    \nlife/urls.py\n    \nlife/views.py\n    class LifeView(TemplateView):\n    class ExperienceView(ListView):\n    class YearView(ListView):\n    class LifeAdd(LoginRequiredMixin, RedirectView):\n    class LifeEdit(UpdateView):\nmybook/__init__.py\n    \nmybook/admin.py\n    \nmybook/apps.py\n    class MybookConfig(AppConfig):\nmybook/models.py\n    class Author(models.Model):\n    class Book(models.Model):\nmybook/mybook.py\n    \nmybook/mybook_views.py\n    class MyBookDocDisplay(TemplateView):\n    class MyBookPrivateDoc(LoginRequiredMixin, MyBookDocDisplay):\n    class BookNotes(MyBookDocDisplay):\n    class CardView(MyBookDocDisplay):\n    class OutlineView(MyBookDocDisplay):\n    class DailyTask(RedirectView):\n    # class SeamansLog(MyBookDocDisplay):\n    class SeamansLog(RedirectView):\n    class SpiritualSelect(RedirectView):\n    class TabsView(MyBookDocDisplay):\nmybook/outline.py\n    \nmybook/task.py\n    \nmybook/tests.py\n    \nmybook/urls.py\n    \nsensei/__init__.py\n    \nsensei/admin.py\n    \nsensei/apps.py\n    class SenseiConfig(AppConfig):\nsensei/models.py\n    class Course(models.Model):\n    class Student(models.Model):\n    class Lesson(models.Model):\n    class Review(models.Model):\nsensei/review.py\n    \nsensei/sensei.py\n    \nsensei/student.py\n    \nsensei/tests.py\n    \nsensei/urls.py\n    \nsensei/views.py\n    class UncDocDisplay(TemplateView):\n    class UncReading(TemplateView):\n    class UncRegister(FormView):\n        class EditDocForm(Form):\n    class UncRegistered(ListView):\n    class UncSlidesDisplay(TemplateView):\n    class UncStudent(TemplateView):\nsuperuser/__init__.py\n    \nsuperuser/admin.py\n    \nsuperuser/admin_views.py\n    class AdminView(UserPassesTestMixin, TemplateView):\n    class DatabaseView(UserPassesTestMixin, TemplateView):\n    class DocView(UserPassesTestMixin, TemplateView):\n    class LogView(UserPassesTestMixin, TemplateView):\n    class MaterialView(TemplateView):\n    class SurrogateView(UserPassesTestMixin, TemplateView):\n    class TestView(UserPassesTestMixin, ListView):\n    class UsersView(UserPassesTestMixin, ListView):\nsuperuser/apps.py\n    class AdminConfig(AppConfig):\nsuperuser/initialize.py\n    \nsuperuser/models.py\n    class Administrator(models.Model):\nsuperuser/tests.py\n    \nsuperuser/urls.py\n    \ntasks/__init__.py\n    \ntasks/models.py\n    class Task (models.Model):\ntasks/summary.py\n    \ntasks/task.py\n    \ntasks/urls.py\n    \ntasks/views.py\n    class TaskBase(LoginRequiredMixin, ContextMixin):\n    class TaskDelete(DeleteView):\n    class TaskDetail(DetailView):\n    class TaskCreate(CreateView):\n    class TaskUpdate(TaskBase, UpdateView):\n    class TaskHome(TaskBase, TemplateView):\n    class TaskList(TaskBase, ListView):\n    class MyTime(TaskBase, TemplateView):\n    class TimeSummary(TaskBase, TemplateView):\n    class MissingDays(TaskBase, TemplateView):\n    class TaskImport(RedirectView):\n    class TaskExport(TaskBase, TemplateView):\ntest/__init__.py\n    \ntest/app_test.py\n    \ntest/archive_test.py\n    \ntest/booknotes_test.py\n    \ntest/css_test.py\n    \ntest/data_test.py\n    \ntest/doc_test.py\n    \ntest/health_test.py\n    \ntest/hourly_test.py\n    \ntest/i_test.py\n    \ntest/log_test.py\n    \ntest/ops_test.py\n    \ntest/page_test.py\n    \ntest/robot_test.py\n    \ntest/system_test.py\n    \ntest/text_test.py\n    \ntest/tst_test.py\n    \ntest/unc_test.py\n    \ntest/user_test.py\n    \ntest/vc_test.py\n    \ntest/wordpress_test.py\n    \ntool/__init__.py\n    \ntool/document.py\n    \ntool/domain.py\n    \ntool/email.py\n    \ntool/log.py\n    \ntool/management/__init__.py\n    \ntool/management/commands/__init__.py\n    \ntool/management/commands/scriptor.py\n    class Command(BaseCommand):\ntool/models.py\n    class Test(models.Model):\n    class Page(models.Model):\ntool/notify.py\n    \ntool/page.py\n    \ntool/project.py\n    class ProjectList(ListView):\n    class ProjectDetail(DetailView):\n    class ProjectCreate(CreateView):\n    class ProjectUpdate(UpdateView):\n    class ProjectDelete(DeleteView):\ntool/robot.py\n    \ntool/tst.py\n    \ntool/urls.py\n    \ntool/user.py\n    \ntool/user_views.py\n    class UserList(ListView):\n    class UserCreate(CreateView):\n    class UserDetail(DetailView):\n    class UserEdit(UpdateView):\n    class UserDelete(DeleteView):\n"
        },
        "model": "tool.test",
        "pk": 20
    },
    {
        "fields": {
            "expected": "shell(x app functions) --> 746 lines (should be between 800 and 1000)",
            "name": "app-functions",
            "output": "shell(x app functions) --> 745 lines (should be between 800 and 1000)"
        },
        "model": "tool.test",
        "pk": 21
    },
    {
        "fields": {
            "expected": "bin/__init__.py\nbin/app.py\nbin/booknotes.py\nbin/chapter.py\nbin/data.py\nbin/days.py\nbin/diagrams.py\nbin/doc.py\nbin/files.py\nbin/hourly.py\nbin/hours.py\nbin/i.py\nbin/life.py\nbin/log.py\nbin/music.py\nbin/n.py\nbin/ntsh.py\nbin/ops.py\nbin/pandoc.py\nbin/resize.py\nbin/shell.py\nbin/switches.py\nbin/text.py\nbin/todo.py\nbin/tool.py\nbin/user.py\nbin/vc.py\nbin/web.py\nbin/wordpress.py\nbin/x.py\nhammer/__init__.py\nhammer/secret_settings.py\nhammer/settings.py\nhammer/urls.py\nhammer/wsgi.py\nhealth/__init__.py\nhealth/admin.py\nhealth/apps.py\nhealth/health.py\nhealth/models.py\nhealth/tests.py\nhealth/urls.py\nhealth/views.py\nlife/__init__.py\nlife/admin.py\nlife/apps.py\nlife/life.py\nlife/models.py\nlife/tests.py\nlife/urls.py\nlife/views.py\nmybook/__init__.py\nmybook/admin.py\nmybook/apps.py\nmybook/models.py\nmybook/mybook.py\nmybook/mybook_views.py\nmybook/outline.py\nmybook/task.py\nmybook/tests.py\nmybook/urls.py\nsensei/__init__.py\nsensei/admin.py\nsensei/apps.py\nsensei/models.py\nsensei/review.py\nsensei/sensei.py\nsensei/student.py\nsensei/tests.py\nsensei/urls.py\nsensei/views.py\nsuperuser/__init__.py\nsuperuser/admin.py\nsuperuser/admin_views.py\nsuperuser/apps.py\nsuperuser/initialize.py\nsuperuser/models.py\nsuperuser/tests.py\nsuperuser/urls.py\ntasks/__init__.py\ntasks/models.py\ntasks/summary.py\ntasks/task.py\ntasks/urls.py\ntasks/views.py\ntest/__init__.py\ntest/app_test.py\ntest/archive_test.py\ntest/booknotes_test.py\ntest/css_test.py\ntest/data_test.py\ntest/doc_test.py\ntest/health_test.py\ntest/hourly_test.py\ntest/i_test.py\ntest/log_test.py\ntest/ops_test.py\ntest/page_test.py\ntest/robot_test.py\ntest/system_test.py\ntest/text_test.py\ntest/tst_test.py\ntest/unc_test.py\ntest/user_test.py\ntest/vc_test.py\ntest/wordpress_test.py\ntool/__init__.py\ntool/document.py\ntool/domain.py\ntool/email.py\ntool/log.py\ntool/management/__init__.py\ntool/management/commands/__init__.py\ntool/management/commands/scriptor.py\ntool/models.py\ntool/notify.py\ntool/page.py\ntool/project.py\ntool/robot.py\ntool/tst.py\ntool/urls.py\ntool/user.py\ntool/user_views.py\n",
            "name": "app-list",
            "output": "bin/__init__.py\nbin/app.py\nbin/booknotes.py\nbin/chapter.py\nbin/data.py\nbin/days.py\nbin/diagrams.py\nbin/doc.py\nbin/files.py\nbin/hourly.py\nbin/hours.py\nbin/i.py\nbin/life.py\nbin/log.py\nbin/music.py\nbin/n.py\nbin/ntsh.py\nbin/ops.py\nbin/resize.py\nbin/shell.py\nbin/switches.py\nbin/text.py\nbin/todo.py\nbin/tool.py\nbin/user.py\nbin/vc.py\nbin/web.py\nbin/wordpress.py\nbin/x.py\nhammer/__init__.py\nhammer/secret_settings.py\nhammer/settings.py\nhammer/urls.py\nhammer/wsgi.py\nhealth/__init__.py\nhealth/admin.py\nhealth/apps.py\nhealth/health.py\nhealth/models.py\nhealth/tests.py\nhealth/urls.py\nhealth/views.py\nlife/__init__.py\nlife/admin.py\nlife/apps.py\nlife/life.py\nlife/models.py\nlife/tests.py\nlife/urls.py\nlife/views.py\nmybook/__init__.py\nmybook/admin.py\nmybook/apps.py\nmybook/models.py\nmybook/mybook.py\nmybook/mybook_views.py\nmybook/outline.py\nmybook/task.py\nmybook/tests.py\nmybook/urls.py\nsensei/__init__.py\nsensei/admin.py\nsensei/apps.py\nsensei/models.py\nsensei/review.py\nsensei/sensei.py\nsensei/student.py\nsensei/tests.py\nsensei/urls.py\nsensei/views.py\nsuperuser/__init__.py\nsuperuser/admin.py\nsuperuser/admin_views.py\nsuperuser/apps.py\nsuperuser/initialize.py\nsuperuser/models.py\nsuperuser/tests.py\nsuperuser/urls.py\ntasks/__init__.py\ntasks/models.py\ntasks/summary.py\ntasks/task.py\ntasks/urls.py\ntasks/views.py\ntest/__init__.py\ntest/app_test.py\ntest/archive_test.py\ntest/booknotes_test.py\ntest/css_test.py\ntest/data_test.py\ntest/doc_test.py\ntest/health_test.py\ntest/hourly_test.py\ntest/i_test.py\ntest/log_test.py\ntest/ops_test.py\ntest/page_test.py\ntest/robot_test.py\ntest/system_test.py\ntest/text_test.py\ntest/tst_test.py\ntest/unc_test.py\ntest/user_test.py\ntest/vc_test.py\ntest/wordpress_test.py\ntool/__init__.py\ntool/document.py\ntool/domain.py\ntool/email.py\ntool/log.py\ntool/management/__init__.py\ntool/management/commands/__init__.py\ntool/management/commands/scriptor.py\ntool/models.py\ntool/notify.py\ntool/page.py\ntool/project.py\ntool/robot.py\ntool/tst.py\ntool/urls.py\ntool/user.py\ntool/user_views.py\n"
        },
        "model": "tool.test",
        "pk": 22
    },
    {
        "fields": {
            "expected": "\"\"\"\nDjango settings for Hammer project.\n\n\"\"\"\n\nfrom platform import node\nfrom os.path import dirname, join\n\n\nBASE_DIR = dirname(dirname(__file__))\nDOC_ROOT = join(BASE_DIR, 'Documents')\nLOG_DIR = join(BASE_DIR, 'log')\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nif 'MyBook' == node():\n    DEBUG = False\nelse:\n    DEBUG = True\n    ALLOWED_HOSTS = ['*']\nDEBUG = True\n\n\n# Application definition\nINSTALLED_APPS = [\n    # Django System\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.humanize',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # MyBook\n    'health',\n    'life',\n    'mybook',\n    'sensei',\n    'superuser',\n    'tasks',\n    'tool',\n]\n\nMIDDLEWARE_CLASSES = [\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# Loading templates\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            join(BASE_DIR, \"templates\"),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this\n                # list if you haven't customized them:\n                'django.contrib.auth.context_processors.auth',\n                'django.template.context_processors.debug',\n                'django.template.context_processors.i18n',\n                'django.template.context_processors.media',\n                'django.template.context_processors.static',\n                'django.template.context_processors.tz',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nROOT_URLCONF = 'hammer.urls'\nLOGIN_URL='/login/'\nLOGIN_REDIRECT_URL = '/'\n\nWSGI_APPLICATION = 'hammer.wsgi.application'\n\nEMAIL_FROM = \"mark.seaman@shrinking-world.com\"\n\n\n# Secrets\nfrom .secret_settings import DATABASES, SECRET_KEY, EMAIL_HOST, EMAIL_PORT, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, EMAIL_USE_TLS\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'US/Mountain'\nUSE_I18N = False\nUSE_L10N = False\nUSE_TZ = True\n\n\n# Static server\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (BASE_DIR + '/static', BASE_DIR + '/docs',)\n\nLOGGING = {\n\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n         'hammer-file': {\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',\n            'filename': join(BASE_DIR, 'log', 'hammer.log'),\n        },\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n         'tool': {\n            'handlers': ['hammer-file'],\n        },\n    },\n    'root': {'level': 'INFO'},\n}\n\n\n\nif 'MyBook' in node():\n\n    # Allow Django from all hosts. This snippet is installed from\n    # /var/lib/digitalocean/allow_hosts.py\n\n    import os\n    import netifaces\n\n    # Find out what the IP addresses are at run time\n    # This is necessary because otherwise Gunicorn will reject the connections\n    def ip_addresses():\n        ip_list = []\n        for interface in netifaces.interfaces():\n            addrs = netifaces.ifaddresses(interface)\n            for x in (netifaces.AF_INET, netifaces.AF_INET6):\n                if x in addrs:\n                    ip_list.append(addrs[x][0]['addr'])\n        return ip_list\n\n    # Discover our IP address\n    domains = [\n        'markseaman.info',\n        'markseaman.org',   \n        'seamanslog.com',\n        'seamansguide.com',\n        'shrinking-world.com',\n        'shrinking-world.org',\n        'spiritual-things.org',\n    ]\n    ALLOWED_HOSTS = domains + ip_addresses()\n\n\n",
            "name": "app-settings",
            "output": "\"\"\"\nDjango settings for Hammer project.\n\n\"\"\"\n\nfrom platform import node\nfrom os.path import dirname, join\n\n\nBASE_DIR = dirname(dirname(__file__))\nDOC_ROOT = join(BASE_DIR, 'Documents')\nLOG_DIR = join(BASE_DIR, 'log')\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nif 'MyBook' == node():\n    DEBUG = False\nelse:\n    DEBUG = True\n    ALLOWED_HOSTS = ['*']\nDEBUG = True\n\n\n# Application definition\nINSTALLED_APPS = [\n    # Django System\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.humanize',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # MyBook\n    'health',\n    'life',\n    'mybook',\n    'sensei',\n    'superuser',\n    'tasks',\n    'tool',\n]\n\nMIDDLEWARE_CLASSES = [\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# Loading templates\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            join(BASE_DIR, \"templates\"),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this\n                # list if you haven't customized them:\n                'django.contrib.auth.context_processors.auth',\n                'django.template.context_processors.debug',\n                'django.template.context_processors.i18n',\n                'django.template.context_processors.media',\n                'django.template.context_processors.static',\n                'django.template.context_processors.tz',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nROOT_URLCONF = 'hammer.urls'\nLOGIN_URL='/login/'\nLOGIN_REDIRECT_URL = '/'\n\nWSGI_APPLICATION = 'hammer.wsgi.application'\n\nEMAIL_FROM = \"mark.seaman@shrinking-world.com\"\n\n\n# Secrets\nfrom .secret_settings import DATABASES, SECRET_KEY, EMAIL_HOST, EMAIL_PORT, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, EMAIL_USE_TLS\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'US/Mountain'\nUSE_I18N = False\nUSE_L10N = False\nUSE_TZ = True\n\n\n# Static server\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (BASE_DIR + '/static', BASE_DIR + '/docs',)\n\nLOGGING = {\n\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n         'hammer-file': {\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',\n            'filename': join(BASE_DIR, 'log', 'hammer.log'),\n        },\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n         'tool': {\n            'handlers': ['hammer-file'],\n        },\n    },\n    'root': {'level': 'INFO'},\n}\n\n\n\nif 'MyBook' in node():\n\n    # Allow Django from all hosts. This snippet is installed from\n    # /var/lib/digitalocean/allow_hosts.py\n\n    import os\n    import netifaces\n\n    # Find out what the IP addresses are at run time\n    # This is necessary because otherwise Gunicorn will reject the connections\n    def ip_addresses():\n        ip_list = []\n        for interface in netifaces.interfaces():\n            addrs = netifaces.ifaddresses(interface)\n            for x in (netifaces.AF_INET, netifaces.AF_INET6):\n                if x in addrs:\n                    ip_list.append(addrs[x][0]['addr'])\n        return ip_list\n\n    # Discover our IP address\n    domains = [\n        'markseaman.info',\n        'markseaman.org',   \n        'seamanslog.com',\n        'seamansguide.com',\n        'shrinking-world.com',\n        'shrinking-world.org',\n        'spiritual-things.org',\n    ]\n    ALLOWED_HOSTS = domains + ip_addresses()\n\n\n"
        },
        "model": "tool.test",
        "pk": 23
    },
    {
        "fields": {
            "expected": "no output",
            "name": "app-show",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 24
    },
    {
        "fields": {
            "expected": "bin/__init__.py\n    \nbin/app.py\n     app_command(options)\n     app_help()\n     app_functions(args)\n     app_classes(args)\n     app_signature(args)\n     app_search_code(files, search_function)\n         print_indented(outline)\n             app_print(filename, children)\n     app_directories()\n     app_path(topic=None)\n     app_score()\n     app_search(args)\n     app_show(args=None)\n     app_source(args=None)\n     app_summary(args=None)\n     kill_server()\n     app_urls()\n         simplify(url)\n     run_server()\nbin/booknotes.py\n     booknotes_command(options)\n     booknotes_help(args=None)\n     booknotes_content(args)\n     booknotes_doc_path(doc=None)\n     booknotes_edit(args)\n     booknotes_excerpt(args)\n         booknotes()\n         excerpt(note)\n     booknotes_list(args)\nbin/chapter.py\n     compare_chapter(c)\n     update_chapter(c)\n     chapters()\n     update_all_chapters()\nbin/data.py\n     data_command(options)\n     data_backup(host)\n     data_count(host)\n     data_help()\n     data_load(host)\n     data_migrate()\n     data_reset()\n     data_save(host)\n         save(server, app=None)\n     data_server()\n     data_sql(host)\n     data_tables()\n     data_prune_tables()\nbin/days.py\n     days_command(options)\n     days_help(args=None)\n     date_str(t)\n     day_str(t)\n     days_ago(date,days)\n     days_list(args)\n     days_month(args)\n     days_weeks(num_weeks)\n         days_ahead(date, days)\n         enumerate_weeks(today, days)\n         weekly_schedule(filename, days)\n     enumerate_days(today, days)\n     to_date(s)\n     to_day(s)\n     today()\nbin/diagrams.py\n    \nbin/doc.py\n     doc_command(options)\n     doc_help()\n     doc_content(args)\n     doc_count(dir)\n     doc_directories()\n     doc_edit(args)\n     doc_fix()\n     doc_length(args=None)\n     doc_list(args=None)\n     doc_path(doc=None)\n     doc_pick(args)\n     doc_random_select(directory)\n     doc_redirect(page)\n     doc_score(args)\n     doc_search(args)\n     doc_send(args)\n     doc_send_text(args)\n     doc_show(args=None)\n     doc_show_directory(dir=None)\n     doc_stats(args)\n     doc_summary(args=None)\n     fix_chars(text)\n     doc_test(args)\n     doc_word_count(directory)\n     doc_words(args=None)\n     list_documents(dir=None)\nbin/files.py\n     accumulate_new_lines(accumulator, f2)\n     count_files(directory)\n     create_directory(path)\n     delete_file(filename)\n     do_command(cmd, input=None)\n     encode_text(text, encoding='utf-8')\n     fix_chars(text)\n     grep(pattern,file)\n     is_writable(path)\n     list_files(directory)\n     list_dirs(directory)\n     path_name (relative_filename)\n     print_list(lst)\n     print_list2(lst)\n     read_input()\n     read_json(filename)\n     read_file(filename)\n     read_text(f)\n     recursive_list(d)\n     time_sort_file(d)\n     write_text(filename, text, append=None)\n     write_file(filename, lines, append=None)\nbin/hourly.py\n     hourly_command(options)\n     hourly_help(args=None)\n     hourly_doc_path(doc=None)\n     hourly_edit()\n     hourly_list()\n     hourly_run()\n         execute(cmd)\n     hourly_show()\nbin/hours.py\n    #  hours_command(options)\n    #  hours_help(args=None)\n    #  activities_work()\n    #  activities_work_client()\n    #  activities_work_nonpaid()\n    #  activities_play()\n    #  activities_public()\n    #  activities_private()\n    #  activities()\n    #  hours_activity(args)\n    #  hours_add(args)\n    #      enumerate_days(today, days)\n    #      to_date(s)\n    #      date_str(t)\n    #      day_str(t)\n    #      days_ago(date,days)\n    #      month_of_days(start)\n    #  hours_days(args)\n    #  hours_doc_path(args)\n    #  hours_edit(args)\n    #  hours_list(args)\n    #  hours_tasks(args)\n    #  append_tasks(events, lines)\n    #      task_text(lines, start, end)\n    #  hours_show(args)\n    #  hours_summary(args)\n    #  hours_work(args)\n    #  is_day(line)\n    #  is_activity(line)\n    #  is_task(line)\n    #  list_events(args)\n    #  list_tasks(text)\n    #  months()\n    #  print_activities(label, times)\n    #  print_days(times, num_days)\n    #  print_score(times)\n    #      show_score(label, activities, ideal_hours)\n    #  print_table(labels, table)\n    #  print_tasks(results, activity=None)\n    #  print_total_hours(results, activity=None)\n    #      select_activity(record, activity)\n    #  print_total(label, times, activities=None, grand_total=None)\n    #  print_totals(label, times, activities=None, grand_total=None)\n    #  print_work(times, num_days)\n    #  total_activity(filename, times={})\n    #  total_columns(table)\n    #  activity_list(filename)\n    #  total_work_days(filename)\n    #  total_days(filename)\n    #  total_time(times, activities=None)\nbin/i.py\n     i_command(options)\n     i_help(args=None)\n     doc_path()\n     i_add(args)\n     i_edit(args)\n     i_list(args)\nbin/life.py\n     life_command(options)\n     life_doc_path(doc=None)\n     life_edit(doc)\n     life_help(args=None)\n     life_list(args)\n     life_publish(args)\n     life_show(args)\n     life_todo(args)\n     life_web(args)\n     life_words(args)\nbin/log.py\n     log_path()\n     log_command(options)\n     log(label,value=None)\n     log_exception()\n     log_clear()\n     log_read()\nbin/music.py\n     music_command(options)\n     music_help(args=None)\n     list_albums(args)\n     list_collections(args)\n     list_du(args)\n     list_tracks(args)\n     music_copy()\n     music_doc_path(doc=None)\n     music_edit(doc)\n     music_collection(name)\n     music_load(args)\n     music_list(args)\n     music_show(args)\n     music_sync(args)\nbin/n.py\n    \nbin/ntsh.py\n     ntsh_command(argv)\n     commit()\n     clean()\n     convert(f1,f2)\n     convert_png(f1,f2)\n     help()\n     hide()\n     list_files(dirs)\n     new_name(name)\n     name(args)\n     notes()\n     reorder(name)\n     status()\n     view()\n     web(page='%s/notes/fav_list' % archive)\n     zip_open()\n     zip_close()\nbin/ops.py\n     ops_command(options)\n     ops_help(cmd=None, args=None)\n     ops_cmd(args)\n     ops_console()\n     ops_deploy()\n     ops_log()\n     ops_restart()\n     ops_root(server=host, cmd='')\n     ops_update(args)\n     remote_command(server, cmd, user='django')\nbin/pandoc.py\n    \nbin/resize.py\n     save_image_file(filename, image, width, height, imtype)\n     resize_jpeg(filename)\n     resize_png(filename)\n    #  create_thumbnails(infile, photo)\n    #  resize_test()\nbin/shell.py\n     banner(name)\n     check_dirs(path, min=0, max=0)\n     check_dir_list(path, dir_list)\n     check_files(path, min=0, max=0)\n     check_file_list(path, dir_list)\n     check_lines(label, lines, min=0, max=10)\n     check_shell_lines(cmd, min=0, max=10)\n     differences(answer, correct)\n     dir_list(path)\n     dir_tree_list(path)\n     file_tree_list(path, filetype=None)\n     file_list(path, filetype=None)\n     file_path(d='', f='')\n     filter_types(files, filetype=None)\n     hostname()\n     line_match(word, text)\n     line_exclude(word, text)\n     line_count(path)\n     limit_lines(shell_command, min=None, max=None)\n     read_file(path)\n     shell(cmd)\n         command_line(cmd)\n     word_count(text)\n     write_file(path, text)\nbin/switches.py\n     server_type()\n     server_host(server)\nbin/text.py\n     text_command(options)\n     text_help(args=None)\n     find_agents(text)\n     find_anchors(text)\n     find_classes(text)\n     find_functions(text)\n     find_links(text)\n         link(anchor)\n     find_quotes(text)\n     find_signatures(text)\n        pattern = r'(.*\\(.*\\))'\n     find_urls(text)\n     markdown_list_links(host, lines)\n     markdown_list_string(mylist)\n     text_join(text)\n     text_lines(text)\n     text_match(match_pattern, doc)\n     text_no_match(match_pattern, doc)\n     text_outline(text)\n     text_outline_string(outline, depth=0)\n     text_markdown(outline, depth=1)\n         text_body(lines)\n     text_replace(doc, match_pattern, replace_pattern)\n     text_title(text)\n     text_body(text)\n     match_lines(text, pattern)\n     match_pattern(text, pattern)\n     transform_matches(text, match_pattern, select_pattern)\nbin/todo.py\n     todo_command(options)\n     recent_dates(days=3)\n     edit_task_file(date)\nbin/tool.py\n     tool_command(options)\n     tool_edit(args)\n     tool_help(self)\n     tool_list()\n     tool_length()\n     tool_read(args)\nbin/user.py\n    \nbin/vc.py\n     vc_command(options)\n     vc_help(args=None)\n     git_cmd(cmd)\n     git_filter()\n     vc_commit(args)\n     vc_diff(args)\n     vc_dirs()\n     vc_log(args)\n     vc_pull(args)\n     vc_push(args)\n     vc_status(args)\nbin/web.py\n     web_command(args)\n     web_help()\n     web(page)\n     web_path(topic=None)\nbin/wordpress.py\n     wordpress_command(options)\n     wordpress_help(args=None)\n     wordpress_doc_path(doc=None)\n     wordpress_edit(doc)\n     wordpress_list(args)\n     wordpress_host(args)\n     wordpress_ssh(args)\nbin/x.py\n     execute_command(cmd,args)\n     command_help(cmd,args)\n     command_scriptor(cmd, args)\nhammer/__init__.py\n    \nhammer/secret_settings.py\n    #  database_init()\n     user_reset(name, email, password)\nhammer/settings.py\n         ip_addresses()\nhammer/urls.py\n    \nhammer/wsgi.py\n    \nhealth/__init__.py\n    \nhealth/admin.py\n    \nhealth/apps.py\n    \nhealth/health.py\n     health_command(options)\n     health_doc_path(doc=None)\n     health_edit(args)\n     health_help(args=None)\n     health_list(args)\n     health_score()\n        #  total(row)\n        #  print_bar(lag,lead,average)\n        #  print_score(row, score)\n     average (num_list)\n     health_import(args)\n     health_web()\nhealth/models.py\n         __unicode__(self)\n         get_absolute_url(self)\n         as_row(self)\n         labels()\nhealth/tests.py\n    \nhealth/urls.py\n    \nhealth/views.py\n    #  health_menu(page)\n     health_settings(page='home')\n         get_context_data(self, **kwargs)\n         get_queryset(self)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n     health_scores(objects)\n         average(num_list)\n         five_star(rating)\n         scores(row)\nlife/__init__.py\n    \nlife/admin.py\n    \nlife/apps.py\n    \nlife/life.py\n     query_labels()\n     query_get(pk)\n     query_year(age)\n     query_experiences(age=None)\n     experiences_lookup_table(age=None)\nlife/models.py\n         __unicode__(self)\n         __unicode__(self)\n         __unicode__(self)\n         get_absolute_url(self)\n     initialize()\nlife/tests.py\n    \nlife/urls.py\n    \nlife/views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_context_data(self, **kwargs)\nmybook/__init__.py\n    \nmybook/admin.py\n    \nmybook/apps.py\n    \nmybook/models.py\n         __unicode__(self)\n         get_absolute_url(self)\n         as_row(self)\n         labels()\n         values(self)\n         name(self)\n         fields(self)\n         __unicode__(self)\n         get_absolute_url(self)\n         as_row(self)\n         labels()\n         values(self)\n         fields(self)\nmybook/mybook.py\n     mybook_path(page)\n    #  mybook_random_select(directory)\n    #  mybook_redirect(host, page, user)\n    #  mybook_site(title)\n     mybook_site_title(title)\n         site_title_text(page)\n     mybook_content(author, title)\n     main_menu(menu, page=None)\n         menu_active(page, menu_item)\n         menu_entry(page, x)\n         menu_read(menu, page)\n         menu_text(page)\n     booknotes_excerpt(doc)\n         booknotes_doc_path(doc=None)\n         booknotes(doc)\n         excerpt(note)\nmybook/mybook_views.py\n     domain_menu(domain, page)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n    #      get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_context_data(self, **kwargs)\nmybook/outline.py\n     has_kids(text, depth)\n     outline(text)\n     parse_outline(text, tree, depth)\n     print_node(name, depth=1, char='    ')\n     seperator(depth)\n     split_text(text, sep)\n     title(text, depth)\n     read_cards(doc)\n     tabs_data(doc)\n         tab_choice(i,tab)\nmybook/task.py\n     tasks_monthly(year, month)\n     recent_months()\n     months_data_table()\n     tasks_data_table(days)\n     days_data_table(days)\n    #  task_list(task)\n    #  task_list(date)\nmybook/tests.py\n    \nmybook/urls.py\n    \nsensei/__init__.py\n    \nsensei/admin.py\n    \nsensei/apps.py\n    \nsensei/models.py\n         __str__(self)\n         __unicode__(self)\n         __str__(self)\n     fix_reading_names()\n     fix_email_names()\nsensei/review.py\n     allow_review(reviewer, designer, page)\n     calculate_points(student)\n     course_list()\n     create_review(reviewer, designer, page)\n     create_reviews(page, groups)\n     create_sample_courses()\n     requirements(course)\n     requirements_bacs200()\n     requirements_bacs350()\n     count_score(r)\n     review_groups()\n     review_pairs(groups)\n     reviewer_query(reviewer_id)\n     designer_query(designer_id)\n     designer_score(designer_id)\n     designer_scores(designer_id, assignments=None)\n     avg(s)\n     projects(course)\n     reviews_completed(student_id)\n     reviews_done(student_id)\n     reviews_feedback(student_id, page)\n     review_tabs(student_id)\n     reviews_to_do(student_id)\n     reviewer_score(reviewer_id)\n     assignment_page(course, page)\n     reviewer_scores(reviewer_id, assignments)\n     gather_review_scores(course, student=None)\n     student_review_data(student_id)\n     update_review_scores(course)\nsensei/sensei.py\n     add_student(course, name, email, domain)\n     content_lessons(course)\n     course_lessons(course, page)\n     guide_doc_path(doc=None)\n     guide_file(course, doc)\n     guide_schedule(lesson)\n     home_link(title)\n     query_students(course, student=None)\n     get_student(id)\n     get_student_email(email)\n     domain_data(course)\n         domains(course)\n     read_student_list()\n     register_students()\n     student_test_links(student)\n         url(student, page='')\n     lesson_cards(course, lesson)\n         fix_images(text)\n         lesson_markdown(path)\n         card_text(tab_title, tab_text)\n         card_title(tab_text)\n     lesson_data(course, lesson, text)\n         tab_choice(i, tab)\n         lesson_tabs_data(course, lesson)\n     lesson_info(lesson)\n     link(url, title=None)\n     make_link(href, text=None)\n     main_menu(course, page=None)\n         menu_active(page, menu_item)\n         menu_entry(page, x)\n         menu_read(menu_file)\n     missing_page_info(title)\n     page_info(course, title)\n     read_file(course, doc)\n         no_blank_lines(text)\n     schedule_data(course, table)\n         course_part_data(title, table, first, last)\n         lesson_link(lesson)\n         set_links(table)\n         course_parts(table, course)\n     site_titles(course)\n     slide_content_data(course, lesson)\n         adjust_markdown_headings(markdown)\n         format_slides(course, lesson)\n     slides_markdown(page)\n     test_links(course)\n     view_info(kwargs)\n         view_data(course, title, lesson)\nsensei/student.py\n     delete_students()\n     fix_images(text, image_path)\n     import_students()\n     list_students()\n     reading_scores_table()\n     reading_table(scores)\n     reading_scores()\n     register_user_domain(name, email, password, domain)\n     student_scores(student_id)\n     student_totals()\n     site_settings(**kwargs)\n     students()\n     student(id)\nsensei/tests.py\n    \nsensei/urls.py\n    \nsensei/views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         form_valid(self, form)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\nsuperuser/__init__.py\n    \nsuperuser/admin.py\n     admin_print_list()\n     admin_list()\n     admin_table()\n     admin_detail(a)\n     admin_get(pk)\n     database_info()\n     get_detail_data()\n     is_superuser(user)\n     log_text()\n     requesting_user(user)\n     test_list()\n     test_labels()\n     test_results()\n     test_table()\n     test_text(t)\n     text_head(text, lines=3)\n     text_lines(lines, columns=30)\n     user_detail(user)\n     user_labels()\n     user_table(users)\nsuperuser/admin_views.py\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_queryset(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\nsuperuser/apps.py\n    \nsuperuser/initialize.py\n     user_reset(name, email, password)\nsuperuser/models.py\n         __unicode__(self)\n         as_row(self)\n         labels()\n         values(self)\nsuperuser/tests.py\n    \nsuperuser/urls.py\n    \ntasks/__init__.py\n    \ntasks/models.py\n         __unicode__(self)\n        #  get_absolute_url(self)\n         as_row(self)\n         labels()\ntasks/summary.py\n     activity_summary(activity)\n         active_tab(a, t)\n     activities_work()\n     sort_activity(data)\n     bad_days()\n     bad_days_data(days)\n     combine_work_tasks(table, total)\n     tasks_activity(activity)\n     task_activity_details(activity)\n     task_detail(task)\n     query_hours(task, days)\n     task_filter(tasks, activity)\n     time_data()\n     time_totals(totals)\n         time_total(totals, time)\n     percent(actual, total)\n     percent_totals(totals, subtotals)\n     review_totals(totals, subtotals)\n         percent_difference(actual, total, ideal)\n         task_percents(totals, task, index, ideals)\n     time_filter(tasks, days)\n     task_text_list(tasks)\n         format(t)\n     task_list(days=8)\n     time_summary(days)\n     work_types()\n     write_task_files(tlist)\n     task_import_files()\n         task_details(f)\n         read_task_file(f)\n         new_task(date, name, hours, notes)\ntasks/task.py\n     task_command(self, args)\n     task_help(self)\n     days_ago(days)\n     hourly_total(tasks)\n     monthly_hours_invested(task_type, year, month)\n     last_month_hours_invested(task_type)\n     tasks_last_month()\n     task_data_table()\n     monthly_totals(year, month)\n     full_totals()\n     print_summary(summary, start=None, end=None)\n     recent_weeks()\n     recent_months()\n     sort_totals(categories)\n     task_add(self, args)\n     task_delete(self, args)\n     task_details(query, hours)\n         record(name, hours, total)\n     task_doc_path(args)\n     task_edit(self, args)\n     task_get(self, args)\n     task_import(args)\n     task_history(args)\n         print_task_history(tasks)\n     task_list(self, args)\n     task_month(args)\n    #  task_read_events(args)\n     task_read_health(args)\n     task_rename(args)\n     task_set_name(args, task)\n     task_select(task_type=None, date=None, days=None)\n     task_summary(args)\n     task_totals()\n     task_types()\n     task_print_types()\n     task_web()\n     task_week(args)\n     task_work()\n     tasks_monthly(year, month)\n     tasks_weekly(year, month, day)\n     total_hours_invested(task_type)\n     weekly_hours_invested(task_type, year, month, day)\n     weekly_totals(year, month, day)\n     task_report(year, month)\n         query_month_tasks(year, month)\n         task_entry(task)\n     save_monthly_reports(year)\n         save_report(report, month)\n     fix_tasks()\n     test_tasks()\ntasks/urls.py\n    \ntasks/views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_queryset(self)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_context_data(self, **kwargs)\ntest/__init__.py\n    \ntest/app_test.py\n     app_classes_test()\n     app_functions_test()\n     app_list_test()\n     app_switches_test()\n     app_settings_test()\n     app_show_test()\n     app_signature_test()\n     app_url_test()\ntest/archive_test.py\n     archive_files_test()\n     archive_dirs_test()\n     archive_nts_test()\n     archive_repo_test()\n         list_archives()\ntest/booknotes_test.py\n     booknotes_list_test()\n     booknotes_lines_test()\ntest/css_test.py\n     css_mybook_test()\n     css_unc_test()\n     css_slides_test()\ntest/data_test.py\n     data_files_test()\n     data_save_test()\n     data_tables_test()\n     data_migrate_test()\ntest/doc_test.py\n    #  doc_test()\n    #  doc_help_test()\n    #  doc_search_test()\n    #  doc_scan_test()\n    #  doc_file_test()\n    #  doc_file_missing_test()\n    #  doc_consolidate()\n    #  doc_render_test()\n    #  doc_encoding_test()\ntest/health_test.py\n     health_list_test()\n     health_score_test()\ntest/hourly_test.py\n     hourly_list_test()\n     hourly_show_test()\ntest/i_test.py\n     i_list_test()\ntest/log_test.py\n     log_length_test()\ntest/ops_test.py\n    #  ops_git_pull_test()\n     ops_help_test()\n     ops_server_test()\n     ops_server_type_test()\n     ops_status_test()\ntest/page_test.py\n     check_page(url, min=1, max=1)\n     page_list_test()\n     page_text_test()\n     page_diff_test()\n     page_sites_test()\ntest/robot_test.py\n     robot_list_test()\n     robot_results_test()\n    #  robot_show_test()\ntest/system_test.py\n     system_cron_test()\n     system_disk_free_test ()\n     system_files_count_test()\n     system_host_test()\n     system_ip_test()\n     system_pandoc_test()\n     system_python_files_test()\n     system_python_version_test()\n     system_python_virtualenv_test()\ntest/text_test.py\n     text_help_test()\n     text_match_test()\n     text_no_match_test()\n     text_agents_test()\n     text_outline_test()\n     text_markdown_test()\n     text_format_test()\n     text_round_trip_test()\n     text_grep_test()\n     text_findall_test()\n     text_functions_test()\n     text_select_lines_test()\n     text_url_test()\n     text_links_test()\n    #  text_transforms_test()\n    #      transform(test_case)\n     text_signatures_test()\n     text_anchors_test()\n     text_div_test()\ntest/tst_test.py\n     tst_test()\n     tst_time_test()\ntest/unc_test.py\n     check_page(url, min=1, max=1)\n     unc_files_test()\n     unc_docs_test()\n     unc_site_test()\ntest/user_test.py\n    #  user_import_test()\n    #  user_export_test()\n     user_list_test()\ntest/vc_test.py\n     vc_status_test()\n     vc_pull_test()\ntest/wordpress_test.py\n     wordpress_list_test()\n     wordpress_host_test()\ntool/__init__.py\n    \ntool/document.py\n     doc_cards(page)\n     doc_content(page)\n     doc_dir_exists(title)\n     doc_exists(title)\n     doc_html_text(page, image_path=None)\n     doc_link(title)\n     doc_path(page)\n     domain_doc(domain, page)\n     file_to_html(path, image_path=None)\n         fix_images(text)\n     markdown_to_html(markdown_path, html_path)\n     read_markdown(path)\n     text_to_html(text)\n     title(p1)\n     write_html_file(path, html)\ntool/domain.py\n     domain_title(domain)\n     domain_directory(domain)\ntool/email.py\n     email_command(options)\n     email_help()\n     email_args(args, use_html=True)\n     send_support_request(title, text)\n     send_file_email(args)\n     send_doc_email(args)\n     send_text_email(args)\n     send_html_email(args)\n     send_template_message(emailTo, title, template, data={})\ntool/log.py\n     log(text, value=None)\n     log_exception()\n     log_json(text, data)\n     log_file()\n     show_log()\n     log_notifications(title, recipients)\n     log_page(request, parms='')\ntool/management/__init__.py\n    \ntool/management/commands/__init__.py\n    \ntool/management/commands/scriptor.py\n         add_arguments(self, parser)\n         handle(self, *args, **options)\n         help(self)\ntool/models.py\n    \ntool/notify.py\n     notify_test_results()\n     notify_test_email()\ntool/page.py\n     page_command(self, options)\n     page_help(self)\n     page_add(self, args)\n     page_delete(self, args)\n     page_diff(self, args)\n         show_diff(page)\n     page_expect(self, args)\n     page_html(self, args)\n         show_output(page)\n     page_like(self, args)\n         like_page(page)\n     page_list(self)\n     page_lookup(url)\n     page_reset(self)\n     page_results()\n     page_text(self, args)\n         show_output(page)            \ntool/project.py\n     project_add(self, args)\n     project_command(self, options)\n     project_delete(self, args)\n     project_get(self, args)\n     project_help(self)\n     project_list(self)\n     project_lookup(name)\ntool/robot.py\n     robot_command(options)\n     robot_help(args=None)\n     robot_doc_path(doc=None)\n     robot_fetch_page(url)\n     robot_get_page(browser, page)\n     robot_list()\n     robot_login(browser,page)\n     robot_results()\n     robot_run()\ntool/tst.py\n     tst_find()\n     get_module(modulename)\n     test_map(modulename)\n         test_entry(entry)\n         tests(module)\n     tst_command(self, args)\n     test_dictionary()\n         module_list(directory)\n         test_name(module)\n     tst_diff(test_name)\n     tst_edit(self, args)\n     tst_help(self)\n     tst_like(self,args)\n     tst_list(self,args)\n     tst_output(self,args)\n     tst_register(tests)\n     tst_results()\n         show_differences(t)\n     tst_run(self,args)\n         run_test(self,test_entry)\n     tst_send(self,args)\ntool/urls.py\n    \ntool/user.py\n     user_command(self, options)\n     user_help()\n     user_add(name, email, password='test')\n     user_delete(args)\n     user_export(self, args)\n     user_get(pk)\n     user_import(self, args)\n     user_list()\n     user_password(username, password)\n     user_lookup(name, email=None)\n     user_file_path(args)\n     user_fix_name(args)\n     show_users()\n     reset_passwords()\ntool/user_views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n",
            "name": "app-signature",
            "output": "bin/__init__.py\n    \nbin/app.py\n     app_command(options)\n     app_help()\n     app_functions(args)\n     app_classes(args)\n     app_signature(args)\n     app_search_code(files, search_function)\n         print_indented(outline)\n             app_print(filename, children)\n     app_directories()\n     app_path(topic=None)\n     app_score()\n     app_search(args)\n     app_show(args=None)\n     app_source(args=None)\n     app_summary(args=None)\n     kill_server()\n     app_urls()\n         simplify(url)\n     run_server()\nbin/booknotes.py\n     booknotes_command(options)\n     booknotes_help(args=None)\n     booknotes_content(args)\n     booknotes_doc_path(doc=None)\n     booknotes_edit(args)\n     booknotes_excerpt(args)\n         booknotes()\n         excerpt(note)\n     booknotes_list(args)\nbin/chapter.py\n     compare_chapter(c)\n     update_chapter(c)\n     chapters()\n     update_all_chapters()\nbin/data.py\n     data_command(options)\n     data_backup(host)\n     data_count(host)\n     data_help()\n     data_load(host)\n     data_migrate()\n     data_reset()\n     data_save(host)\n         save(server, app=None)\n     data_server()\n     data_sql(host)\n     data_tables()\n     data_prune_tables()\nbin/days.py\n     days_command(options)\n     days_help(args=None)\n     date_str(t)\n     day_str(t)\n     days_ago(date,days)\n     days_list(args)\n     days_month(args)\n     days_weeks(num_weeks)\n         days_ahead(date, days)\n         enumerate_weeks(today, days)\n         weekly_schedule(filename, days)\n     enumerate_days(today, days)\n     to_date(s)\n     to_day(s)\n     today()\nbin/diagrams.py\n    \nbin/doc.py\n     doc_command(options)\n     doc_help()\n     doc_content(args)\n     doc_count(dir)\n     doc_directories()\n     doc_edit(args)\n     doc_fix()\n     doc_length(args=None)\n     doc_list(args=None)\n     doc_path(doc=None)\n     doc_pick(args)\n     doc_random_select(directory)\n     doc_redirect(page)\n     doc_score(args)\n     doc_search(args)\n     doc_send(args)\n     doc_send_text(args)\n     doc_show(args=None)\n     doc_show_directory(dir=None)\n     doc_stats(args)\n     doc_summary(args=None)\n     fix_chars(text)\n     doc_test(args)\n     doc_word_count(directory)\n     doc_words(args=None)\n     list_documents(dir=None)\nbin/files.py\n     accumulate_new_lines(accumulator, f2)\n     count_files(directory)\n     create_directory(path)\n     delete_file(filename)\n     do_command(cmd, input=None)\n     encode_text(text, encoding='utf-8')\n     fix_chars(text)\n     grep(pattern,file)\n     is_writable(path)\n     list_files(directory)\n     list_dirs(directory)\n     path_name (relative_filename)\n     print_list(lst)\n     print_list2(lst)\n     read_input()\n     read_json(filename)\n     read_file(filename)\n     read_text(f)\n     recursive_list(d)\n     time_sort_file(d)\n     write_text(filename, text, append=None)\n     write_file(filename, lines, append=None)\nbin/hourly.py\n     hourly_command(options)\n     hourly_help(args=None)\n     hourly_doc_path(doc=None)\n     hourly_edit()\n     hourly_list()\n     hourly_run()\n         execute(cmd)\n     hourly_show()\nbin/hours.py\n    #  hours_command(options)\n    #  hours_help(args=None)\n    #  activities_work()\n    #  activities_work_client()\n    #  activities_work_nonpaid()\n    #  activities_play()\n    #  activities_public()\n    #  activities_private()\n    #  activities()\n    #  hours_activity(args)\n    #  hours_add(args)\n    #      enumerate_days(today, days)\n    #      to_date(s)\n    #      date_str(t)\n    #      day_str(t)\n    #      days_ago(date,days)\n    #      month_of_days(start)\n    #  hours_days(args)\n    #  hours_doc_path(args)\n    #  hours_edit(args)\n    #  hours_list(args)\n    #  hours_tasks(args)\n    #  append_tasks(events, lines)\n    #      task_text(lines, start, end)\n    #  hours_show(args)\n    #  hours_summary(args)\n    #  hours_work(args)\n    #  is_day(line)\n    #  is_activity(line)\n    #  is_task(line)\n    #  list_events(args)\n    #  list_tasks(text)\n    #  months()\n    #  print_activities(label, times)\n    #  print_days(times, num_days)\n    #  print_score(times)\n    #      show_score(label, activities, ideal_hours)\n    #  print_table(labels, table)\n    #  print_tasks(results, activity=None)\n    #  print_total_hours(results, activity=None)\n    #      select_activity(record, activity)\n    #  print_total(label, times, activities=None, grand_total=None)\n    #  print_totals(label, times, activities=None, grand_total=None)\n    #  print_work(times, num_days)\n    #  total_activity(filename, times={})\n    #  total_columns(table)\n    #  activity_list(filename)\n    #  total_work_days(filename)\n    #  total_days(filename)\n    #  total_time(times, activities=None)\nbin/i.py\n     i_command(options)\n     i_help(args=None)\n     doc_path()\n     i_add(args)\n     i_edit(args)\n     i_list(args)\nbin/life.py\n     life_command(options)\n     life_doc_path(doc=None)\n     life_edit(doc)\n     life_help(args=None)\n     life_list(args)\n     life_publish(args)\n     life_show(args)\n     life_todo(args)\n     life_web(args)\n     life_words(args)\nbin/log.py\n     log_path()\n     log_command(options)\n     log(label,value=None)\n     log_exception()\n     log_clear()\n     log_read()\nbin/music.py\n     music_command(options)\n     music_help(args=None)\n     list_albums(args)\n     list_collections(args)\n     list_du(args)\n     list_tracks(args)\n     music_copy()\n     music_doc_path(doc=None)\n     music_edit(doc)\n     music_collection(name)\n     music_load(args)\n     music_list(args)\n     music_show(args)\n     music_sync(args)\nbin/n.py\n    \nbin/ntsh.py\n     ntsh_command(argv)\n     commit()\n     clean()\n     convert(f1,f2)\n     convert_png(f1,f2)\n     help()\n     hide()\n     list_files(dirs)\n     new_name(name)\n     name(args)\n     notes()\n     reorder(name)\n     status()\n     view()\n     web(page='%s/notes/fav_list' % archive)\n     zip_open()\n     zip_close()\nbin/ops.py\n     ops_command(options)\n     ops_help(cmd=None, args=None)\n     ops_cmd(args)\n     ops_console()\n     ops_deploy()\n     ops_log()\n     ops_restart()\n     ops_root(server=host, cmd='')\n     ops_update(args)\n     remote_command(server, cmd, user='django')\nbin/resize.py\n     save_image_file(filename, image, width, height, imtype)\n     resize_jpeg(filename)\n     resize_png(filename)\n    #  create_thumbnails(infile, photo)\n    #  resize_test()\nbin/shell.py\n     banner(name)\n     check_dirs(path, min=0, max=0)\n     check_dir_list(path, dir_list)\n     check_files(path, min=0, max=0)\n     check_file_list(path, dir_list)\n     check_lines(label, lines, min=0, max=10)\n     check_shell_lines(cmd, min=0, max=10)\n     differences(answer, correct)\n     dir_list(path)\n     dir_tree_list(path)\n     file_tree_list(path, filetype=None)\n     file_list(path, filetype=None)\n     file_path(d='', f='')\n     filter_types(files, filetype=None)\n     hostname()\n     line_match(word, text)\n     line_exclude(word, text)\n     line_count(path)\n     limit_lines(shell_command, min=None, max=None)\n     read_file(path)\n     shell(cmd)\n         command_line(cmd)\n     word_count(text)\n     write_file(path, text)\nbin/switches.py\n     server_type()\n     server_host(server)\nbin/text.py\n     text_command(options)\n     text_help(args=None)\n     find_agents(text)\n     find_anchors(text)\n     find_classes(text)\n     find_functions(text)\n     find_links(text)\n         link(anchor)\n     find_quotes(text)\n     find_signatures(text)\n        pattern = r'(.*\\(.*\\))'\n     find_urls(text)\n     markdown_list_links(host, lines)\n     markdown_list_string(mylist)\n     text_join(text)\n     text_lines(text)\n     text_match(match_pattern, doc)\n     text_no_match(match_pattern, doc)\n     text_outline(text)\n     text_outline_string(outline, depth=0)\n     text_markdown(outline, depth=1)\n         text_body(lines)\n     text_replace(doc, match_pattern, replace_pattern)\n     text_title(text)\n     text_body(text)\n     match_lines(text, pattern)\n     match_pattern(text, pattern)\n     transform_matches(text, match_pattern, select_pattern)\nbin/todo.py\n     todo_command(options)\n     recent_dates(days=3)\n     edit_task_file(date)\nbin/tool.py\n     tool_command(options)\n     tool_edit(args)\n     tool_help(self)\n     tool_list()\n     tool_length()\n     tool_read(args)\nbin/user.py\n    \nbin/vc.py\n     vc_command(options)\n     vc_help(args=None)\n     git_cmd(cmd)\n     git_filter()\n     vc_commit(args)\n     vc_diff(args)\n     vc_dirs()\n     vc_log(args)\n     vc_pull(args)\n     vc_push(args)\n     vc_status(args)\nbin/web.py\n     web_command(args)\n     web_help()\n     web(page)\n     web_path(topic=None)\nbin/wordpress.py\n     wordpress_command(options)\n     wordpress_help(args=None)\n     wordpress_doc_path(doc=None)\n     wordpress_edit(doc)\n     wordpress_list(args)\n     wordpress_host(args)\n     wordpress_ssh(args)\nbin/x.py\n     execute_command(cmd,args)\n     command_help(cmd,args)\n     command_scriptor(cmd, args)\nhammer/__init__.py\n    \nhammer/secret_settings.py\n    #  database_init()\n     user_reset(name, email, password)\nhammer/settings.py\n         ip_addresses()\nhammer/urls.py\n    \nhammer/wsgi.py\n    \nhealth/__init__.py\n    \nhealth/admin.py\n    \nhealth/apps.py\n    \nhealth/health.py\n     health_command(options)\n     health_doc_path(doc=None)\n     health_edit(args)\n     health_help(args=None)\n     health_list(args)\n     health_score()\n        #  total(row)\n        #  print_bar(lag,lead,average)\n        #  print_score(row, score)\n     average (num_list)\n     health_import(args)\n     health_web()\nhealth/models.py\n         __unicode__(self)\n         get_absolute_url(self)\n         as_row(self)\n         labels()\nhealth/tests.py\n    \nhealth/urls.py\n    \nhealth/views.py\n    #  health_menu(page)\n     health_settings(page='home')\n         get_context_data(self, **kwargs)\n         get_queryset(self)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n     health_scores(objects)\n         average(num_list)\n         five_star(rating)\n         scores(row)\nlife/__init__.py\n    \nlife/admin.py\n    \nlife/apps.py\n    \nlife/life.py\n     query_labels()\n     query_get(pk)\n     query_year(age)\n     query_experiences(age=None)\n     experiences_lookup_table(age=None)\nlife/models.py\n         __unicode__(self)\n         __unicode__(self)\n         __unicode__(self)\n         get_absolute_url(self)\n     initialize()\nlife/tests.py\n    \nlife/urls.py\n    \nlife/views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_context_data(self, **kwargs)\nmybook/__init__.py\n    \nmybook/admin.py\n    \nmybook/apps.py\n    \nmybook/models.py\n         __unicode__(self)\n         get_absolute_url(self)\n         as_row(self)\n         labels()\n         values(self)\n         name(self)\n         fields(self)\n         __unicode__(self)\n         get_absolute_url(self)\n         as_row(self)\n         labels()\n         values(self)\n         fields(self)\nmybook/mybook.py\n     mybook_path(page)\n    #  mybook_random_select(directory)\n    #  mybook_redirect(host, page, user)\n    #  mybook_site(title)\n     mybook_site_title(title)\n         site_title_text(page)\n     mybook_content(author, title)\n     main_menu(menu, page=None)\n         menu_active(page, menu_item)\n         menu_entry(page, x)\n         menu_read(menu, page)\n         menu_text(page)\n     booknotes_excerpt(doc)\n         booknotes_doc_path(doc=None)\n         booknotes(doc)\n         excerpt(note)\nmybook/mybook_views.py\n     domain_menu(domain, page)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n    #      get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_context_data(self, **kwargs)\nmybook/outline.py\n     has_kids(text, depth)\n     outline(text)\n     parse_outline(text, tree, depth)\n     print_node(name, depth=1, char='    ')\n     seperator(depth)\n     split_text(text, sep)\n     title(text, depth)\n     read_cards(doc)\n     tabs_data(doc)\n         tab_choice(i,tab)\nmybook/task.py\n     tasks_monthly(year, month)\n     recent_months()\n     months_data_table()\n     tasks_data_table(days)\n     days_data_table(days)\n    #  task_list(task)\n    #  task_list(date)\nmybook/tests.py\n    \nmybook/urls.py\n    \nsensei/__init__.py\n    \nsensei/admin.py\n    \nsensei/apps.py\n    \nsensei/models.py\n         __str__(self)\n         __unicode__(self)\n         __str__(self)\n     fix_reading_names()\n     fix_email_names()\nsensei/review.py\n     allow_review(reviewer, designer, page)\n     calculate_points(student)\n     course_list()\n     create_review(reviewer, designer, page)\n     create_reviews(page, groups)\n     create_sample_courses()\n     requirements(course)\n     requirements_bacs200()\n     requirements_bacs350()\n     count_score(r)\n     review_groups()\n     review_pairs(groups)\n     reviewer_query(reviewer_id)\n     designer_query(designer_id)\n     designer_score(designer_id)\n     designer_scores(designer_id, assignments=None)\n     avg(s)\n     projects(course)\n     reviews_completed(student_id)\n     reviews_done(student_id)\n     reviews_feedback(student_id, page)\n     review_tabs(student_id)\n     reviews_to_do(student_id)\n     reviewer_score(reviewer_id)\n     assignment_page(course, page)\n     reviewer_scores(reviewer_id, assignments)\n     gather_review_scores(course, student=None)\n     student_review_data(student_id)\n     update_review_scores(course)\nsensei/sensei.py\n     add_student(course, name, email, domain)\n     content_lessons(course)\n     course_lessons(course, page)\n     guide_doc_path(doc=None)\n     guide_file(course, doc)\n     guide_schedule(lesson)\n     home_link(title)\n     query_students(course, student=None)\n     get_student(id)\n     get_student_email(email)\n     domain_data(course)\n         domains(course)\n     read_student_list()\n     register_students()\n     student_test_links(student)\n         url(student, page='')\n     lesson_cards(course, lesson)\n         fix_images(text)\n         lesson_markdown(path)\n         card_text(tab_title, tab_text)\n         card_title(tab_text)\n     lesson_data(course, lesson, text)\n         tab_choice(i, tab)\n         lesson_tabs_data(course, lesson)\n     lesson_info(lesson)\n     link(url, title=None)\n     make_link(href, text=None)\n     main_menu(course, page=None)\n         menu_active(page, menu_item)\n         menu_entry(page, x)\n         menu_read(menu_file)\n     missing_page_info(title)\n     page_info(course, title)\n     read_file(course, doc)\n         no_blank_lines(text)\n     schedule_data(course, table)\n         course_part_data(title, table, first, last)\n         lesson_link(lesson)\n         set_links(table)\n         course_parts(table, course)\n     site_titles(course)\n     slide_content_data(course, lesson)\n         adjust_markdown_headings(markdown)\n         format_slides(course, lesson)\n     slides_markdown(page)\n     test_links(course)\n     view_info(kwargs)\n         view_data(course, title, lesson)\nsensei/student.py\n     delete_students()\n     fix_images(text, image_path)\n     import_students()\n     list_students()\n     reading_scores_table()\n     reading_table(scores)\n     reading_scores()\n     register_user_domain(name, email, password, domain)\n     student_scores(student_id)\n     student_totals()\n     site_settings(**kwargs)\n     students()\n     student(id)\nsensei/tests.py\n    \nsensei/urls.py\n    \nsensei/views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         form_valid(self, form)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\nsuperuser/__init__.py\n    \nsuperuser/admin.py\n     admin_print_list()\n     admin_list()\n     admin_table()\n     admin_detail(a)\n     admin_get(pk)\n     database_info()\n     get_detail_data()\n     is_superuser(user)\n     log_text()\n     requesting_user(user)\n     test_list()\n     test_labels()\n     test_results()\n     test_table()\n     test_text(t)\n     text_head(text, lines=3)\n     text_lines(lines, columns=30)\n     user_detail(user)\n     user_labels()\n     user_table(users)\nsuperuser/admin_views.py\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_queryset(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\n         get_context_data(self, **kwargs)\n         test_func(self)\nsuperuser/apps.py\n    \nsuperuser/initialize.py\n     user_reset(name, email, password)\nsuperuser/models.py\n         __unicode__(self)\n         as_row(self)\n         labels()\n         values(self)\nsuperuser/tests.py\n    \nsuperuser/urls.py\n    \ntasks/__init__.py\n    \ntasks/models.py\n         __unicode__(self)\n        #  get_absolute_url(self)\n         as_row(self)\n         labels()\ntasks/summary.py\n     activity_summary(activity)\n         active_tab(a, t)\n     activities_work()\n     sort_activity(data)\n     bad_days()\n     bad_days_data(days)\n     combine_work_tasks(table, total)\n     tasks_activity(activity)\n     task_activity_details(activity)\n     task_detail(task)\n     query_hours(task, days)\n     task_filter(tasks, activity)\n     time_data()\n     time_totals(totals)\n         time_total(totals, time)\n     percent(actual, total)\n     percent_totals(totals, subtotals)\n     review_totals(totals, subtotals)\n         percent_difference(actual, total, ideal)\n         task_percents(totals, task, index, ideals)\n     time_filter(tasks, days)\n     task_text_list(tasks)\n         format(t)\n     task_list(days=8)\n     time_summary(days)\n     work_types()\n     write_task_files(tlist)\n     task_import_files()\n         task_details(f)\n         read_task_file(f)\n         new_task(date, name, hours, notes)\ntasks/task.py\n     task_command(self, args)\n     task_help(self)\n     days_ago(days)\n     hourly_total(tasks)\n     monthly_hours_invested(task_type, year, month)\n     last_month_hours_invested(task_type)\n     tasks_last_month()\n     task_data_table()\n     monthly_totals(year, month)\n     full_totals()\n     print_summary(summary, start=None, end=None)\n     recent_weeks()\n     recent_months()\n     sort_totals(categories)\n     task_add(self, args)\n     task_delete(self, args)\n     task_details(query, hours)\n         record(name, hours, total)\n     task_doc_path(args)\n     task_edit(self, args)\n     task_get(self, args)\n     task_import(args)\n     task_history(args)\n         print_task_history(tasks)\n     task_list(self, args)\n     task_month(args)\n    #  task_read_events(args)\n     task_read_health(args)\n     task_rename(args)\n     task_set_name(args, task)\n     task_select(task_type=None, date=None, days=None)\n     task_summary(args)\n     task_totals()\n     task_types()\n     task_print_types()\n     task_web()\n     task_week(args)\n     task_work()\n     tasks_monthly(year, month)\n     tasks_weekly(year, month, day)\n     total_hours_invested(task_type)\n     weekly_hours_invested(task_type, year, month, day)\n     weekly_totals(year, month, day)\n     task_report(year, month)\n         query_month_tasks(year, month)\n         task_entry(task)\n     save_monthly_reports(year)\n         save_report(report, month)\n     fix_tasks()\n     test_tasks()\ntasks/urls.py\n    \ntasks/views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_queryset(self)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_redirect_url(self, *args, **kwargs)\n         get_context_data(self, **kwargs)\ntest/__init__.py\n    \ntest/app_test.py\n     app_classes_test()\n     app_functions_test()\n     app_list_test()\n     app_switches_test()\n     app_settings_test()\n     app_show_test()\n     app_signature_test()\n     app_url_test()\ntest/archive_test.py\n     archive_files_test()\n     archive_dirs_test()\n     archive_nts_test()\n     archive_repo_test()\n         list_archives()\ntest/booknotes_test.py\n     booknotes_list_test()\n     booknotes_lines_test()\ntest/css_test.py\n     css_mybook_test()\n     css_unc_test()\n     css_slides_test()\ntest/data_test.py\n     data_files_test()\n     data_save_test()\n     data_tables_test()\n     data_migrate_test()\ntest/doc_test.py\n    #  doc_test()\n    #  doc_help_test()\n    #  doc_search_test()\n    #  doc_scan_test()\n    #  doc_file_test()\n    #  doc_file_missing_test()\n    #  doc_consolidate()\n    #  doc_render_test()\n    #  doc_encoding_test()\ntest/health_test.py\n     health_list_test()\n     health_score_test()\ntest/hourly_test.py\n     hourly_list_test()\n     hourly_show_test()\ntest/i_test.py\n     i_list_test()\ntest/log_test.py\n     log_length_test()\ntest/ops_test.py\n    #  ops_git_pull_test()\n     ops_help_test()\n     ops_server_test()\n     ops_server_type_test()\n     ops_status_test()\ntest/page_test.py\n     check_page(url, min=1, max=1)\n     page_list_test()\n     page_text_test()\n     page_diff_test()\n     page_sites_test()\ntest/robot_test.py\n     robot_list_test()\n     robot_results_test()\n    #  robot_show_test()\ntest/system_test.py\n     system_cron_test()\n     system_disk_free_test ()\n     system_files_count_test()\n     system_host_test()\n     system_ip_test()\n     system_pandoc_test()\n     system_python_files_test()\n     system_python_version_test()\n     system_python_virtualenv_test()\ntest/text_test.py\n     text_help_test()\n     text_match_test()\n     text_no_match_test()\n     text_agents_test()\n     text_outline_test()\n     text_markdown_test()\n     text_format_test()\n     text_round_trip_test()\n     text_grep_test()\n     text_findall_test()\n     text_functions_test()\n     text_select_lines_test()\n     text_url_test()\n     text_links_test()\n    #  text_transforms_test()\n    #      transform(test_case)\n     text_signatures_test()\n     text_anchors_test()\n     text_div_test()\ntest/tst_test.py\n     tst_test()\n     tst_time_test()\ntest/unc_test.py\n     check_page(url, min=1, max=1)\n     unc_files_test()\n     unc_docs_test()\n     unc_site_test()\ntest/user_test.py\n    #  user_import_test()\n    #  user_export_test()\n     user_list_test()\ntest/vc_test.py\n     vc_status_test()\n     vc_pull_test()\ntest/wordpress_test.py\n     wordpress_list_test()\n     wordpress_host_test()\ntool/__init__.py\n    \ntool/document.py\n     doc_cards(page)\n     doc_content(page)\n     doc_dir_exists(title)\n     doc_exists(title)\n     doc_html_text(page, image_path=None)\n     doc_link(title)\n     doc_path(page)\n     domain_doc(domain, page)\n     file_to_html(path, image_path=None)\n         fix_images(text)\n     markdown_to_html(markdown_path, html_path)\n     read_markdown(path)\n     text_to_html(text)\n     title(p1)\n     write_html_file(path, html)\ntool/domain.py\n     domain_title(domain)\n     domain_directory(domain)\ntool/email.py\n     email_command(options)\n     email_help()\n     email_args(args, use_html=True)\n     send_support_request(title, text)\n     send_file_email(args)\n     send_doc_email(args)\n     send_text_email(args)\n     send_html_email(args)\n     send_template_message(emailTo, title, template, data={})\ntool/log.py\n     log(text, value=None)\n     log_exception()\n     log_json(text, data)\n     log_file()\n     show_log()\n     log_notifications(title, recipients)\n     log_page(request, parms='')\ntool/management/__init__.py\n    \ntool/management/commands/__init__.py\n    \ntool/management/commands/scriptor.py\n         add_arguments(self, parser)\n         handle(self, *args, **options)\n         help(self)\ntool/models.py\n    \ntool/notify.py\n     notify_test_results()\n     notify_test_email()\ntool/page.py\n     page_command(self, options)\n     page_help(self)\n     page_add(self, args)\n     page_delete(self, args)\n     page_diff(self, args)\n         show_diff(page)\n     page_expect(self, args)\n     page_html(self, args)\n         show_output(page)\n     page_like(self, args)\n         like_page(page)\n     page_list(self)\n     page_lookup(url)\n     page_reset(self)\n     page_results()\n     page_text(self, args)\n         show_output(page)            \ntool/project.py\n     project_add(self, args)\n     project_command(self, options)\n     project_delete(self, args)\n     project_get(self, args)\n     project_help(self)\n     project_list(self)\n     project_lookup(name)\ntool/robot.py\n     robot_command(options)\n     robot_help(args=None)\n     robot_doc_path(doc=None)\n     robot_fetch_page(url)\n     robot_get_page(browser, page)\n     robot_list()\n     robot_login(browser,page)\n     robot_results()\n     robot_run()\ntool/tst.py\n     tst_find()\n     get_module(modulename)\n     test_map(modulename)\n         test_entry(entry)\n         tests(module)\n     tst_command(self, args)\n     test_dictionary()\n         module_list(directory)\n         test_name(module)\n     tst_diff(test_name)\n     tst_edit(self, args)\n     tst_help(self)\n     tst_like(self,args)\n     tst_list(self,args)\n     tst_output(self,args)\n     tst_register(tests)\n     tst_results()\n         show_differences(t)\n     tst_run(self,args)\n         run_test(self,test_entry)\n     tst_send(self,args)\ntool/urls.py\n    \ntool/user.py\n     user_command(self, options)\n     user_help()\n     user_add(name, email, password='test')\n     user_delete(args)\n     user_export(self, args)\n     user_get(pk)\n     user_import(self, args)\n     user_list()\n     user_password(username, password)\n     user_lookup(name, email=None)\n     user_file_path(args)\n     user_fix_name(args)\n     show_users()\n     reset_passwords()\ntool/user_views.py\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n         get_context_data(self, **kwargs)\n"
        },
        "model": "tool.test",
        "pk": 25
    },
    {
        "fields": {
            "expected": "from os import environ\nfrom os.path import join\nfrom platform import node\n\n# Project\nHOME = environ.get('HOME', '/home/django')\nPROJECT_BASE = join(HOME, 'Projects', 'hammer')\n\n\n# Application Config\nBASE_DIR = environ.get('p', '/home/django/MyBook')\n\nAPP_PORT = '8001'\nAPP_DIRS = ['bin', 'hammer', 'test', 'tool', 'spiritual']\nAPP_DIR = 'tool'\n\n\n# Documents\nDOC_DIRS = ['tech', 'spiritual', 'software', 'seamanslog', 'brain', 'MarkSeaman']\nTODO_DIR  = join(BASE_DIR, 'Documents', 'info', 'days')\nTHOT_DIR = join(BASE_DIR, 'Documents', 'thot')\nTODO_FILES = [\n    join(TODO_DIR, '2018-05-08'),\n]\n\n\n# Test Settings\nTEST_ARCHIVE = False\nTEST_DOC = join(BASE_DIR, 'Documents', 'info', 'history', 'Index')\nTEST_DOC_ENCODING = False\nTEST_DATA = False\nTEST_SELENIUM = True\nTEST_EMAIL = False\nTEST_PAGES = join(BASE_DIR, 'Documents', 'tech', 'test', 'pages')\nTEST_HOSTS = ['localhost:8001', environ.get('DROPLET_IP','localhost')]\nIMPORT_RECORDS = True\nEXPORT_RECORDS = True\nSHOW_WEB_PAGE = False\nON_INTERNET = True\n\n\n# Servers\nWHO2HIRE_PRODUCTION  = 'app.who2hire.us'         # 138.68.46.197\nMYBOOK_PRODUCTION    = 'markseaman.org'    # 138.68.234.96  # old: 45.55.50.13\nSERVER_DIR           = '/home/django/MyBook'\n\n\n# Server Types\nif node()   == 'MyBook':           \n    SERVER_TYPE = 'production'\nelif node() == 'MyBook-Staging':   \n    SERVER_TYPE = 'staging'\nelif node() == 'Marks-iMac.local':\n    SERVER_TYPE = 'imac'\nelif node() == 'seaman-macbook.local':\n    SERVER_TYPE = 'macbook'\nelse:  \n    SERVER_TYPE = 'dev'\n\n\n# Type of server for this machine\ndef server_type():\n    return SERVER_TYPE\n\n\n# Select Domain that matches Hostname\ndef server_host(server):\n    if   server == 'who2hire':             return 'who2hire.co'\n    elif server == 'MyBook':               return 'markseaman.org'\n    elif server == 'Marks-iMac.local':     return 'iMac'\n    elif server == 'seaman-macbook.local': return 'macbook'\n\n",
            "name": "app-switches",
            "output": "from os import environ\nfrom os.path import join\nfrom platform import node\n\n# Project\nHOME = environ.get('HOME', '/home/django')\nPROJECT_BASE = join(HOME, 'Projects', 'hammer')\n\n\n# Application Config\nBASE_DIR = environ.get('p', '/home/django/MyBook')\n\nAPP_PORT = '8001'\nAPP_DIRS = ['bin', 'hammer', 'test', 'tool', 'spiritual']\nAPP_DIR = 'tool'\n\n\n# Documents\nDOC_DIRS = ['tech', 'spiritual', 'software', 'seamanslog', 'brain', 'MarkSeaman']\nTODO_DIR  = join(BASE_DIR, 'Documents', 'info', 'days')\nTHOT_DIR = join(BASE_DIR, 'Documents', 'thot')\nTODO_FILES = [\n    join(TODO_DIR, '2018-05-08'),\n]\n\n\n# Test Settings\nTEST_ARCHIVE = False\nTEST_DOC = join(BASE_DIR, 'Documents', 'info', 'history', 'Index')\nTEST_DOC_ENCODING = False\nTEST_DATA = False\nTEST_SELENIUM = True\nTEST_EMAIL = False\nTEST_PAGES = join(BASE_DIR, 'Documents', 'tech', 'test', 'pages')\nTEST_HOSTS = ['localhost:8001', environ.get('DROPLET_IP','localhost')]\nIMPORT_RECORDS = True\nEXPORT_RECORDS = True\nSHOW_WEB_PAGE = False\nON_INTERNET = True\n\n\n# Servers\nWHO2HIRE_PRODUCTION  = 'app.who2hire.us'         # 138.68.46.197\nMYBOOK_PRODUCTION    = 'markseaman.org'    # 138.68.234.96  # old: 45.55.50.13\nSERVER_DIR           = '/home/django/MyBook'\n\n\n# Server Types\nif node()   == 'MyBook':           \n    SERVER_TYPE = 'production'\nelif node() == 'MyBook-Staging':   \n    SERVER_TYPE = 'staging'\nelif node() == 'Marks-iMac.local':\n    SERVER_TYPE = 'imac'\nelif node() == 'seaman-macbook.local':\n    SERVER_TYPE = 'macbook'\nelse:  \n    SERVER_TYPE = 'dev'\n\n\n# Type of server for this machine\ndef server_type():\n    return SERVER_TYPE\n\n\n# Select Domain that matches Hostname\ndef server_host(server):\n    if   server == 'who2hire':             return 'who2hire.co'\n    elif server == 'MyBook':               return 'markseaman.org'\n    elif server == 'Marks-iMac.local':     return 'iMac'\n    elif server == 'seaman-macbook.local': return 'macbook'\n\n"
        },
        "model": "tool.test",
        "pk": 26
    },
    {
        "fields": {
            "expected": "Find all the URLs for the app\n\nhammer/urls.py\n\n    robots.txt$, RedirectView.as_view(url=staticfiles_storage.url('robots.txt'),  permanent=True)\n    favicon.ico$, RedirectView.as_view(url=staticfiles_storage.url('favicon.ico'), permanent=True)\n    admin/, admin.site.urls\n    health/, include(health.urls)\n    health, include(health.urls)\n    life/, include(life.urls)\n    life, include(life.urls)\n    superuser/, include(superuser.urls)\n    superuser, include(superuser.urls)\n    task/, include(tasks.urls)\n    task, include(tasks.urls)\n    , include(tool.urls)\n    unc/, include(sensei.urls)\n    unc, include(sensei.urls)\n    , include(mybook.urls)\n\nhealth/urls.py\n\n    $, HealthView\n    history$, HealthList\n    url(r'(?P<pk>\\d+)$, HealthEdit)\n\nlife/urls.py\n\n    $, LifeView\n    experience$, ExperienceView\n    year/(?P<age>[-\\d]+)$, YearView\n    (?P<age>[-\\d]+)/(?P<aspect>[\\W\\w]+)/add$, LifeAdd\n    (?P<pk>\\d+)/edit$, LifeEdit\n\nmybook/urls.py\n\n    login, login, {'template_name': 'mybook_login.html'}\n    logout$, logout, {'next_page': '/login'}\n    booknotes/(?P<title>[\\w/\\-.]*)$, BookNotes\n    info/(?P<title>[\\w/\\-_.]*)$, MyBookPrivateDoc\n    seamanslog$, SeamansLog\n    spiritual/(?P<title>[\\w\\-_.]*)$, SpiritualSelect\n    (?P<title>[\\w/\\-_.]*)$, MyBookDocDisplay\n\nsensei/urls.py\n\n    register$, UncRegister\n    registered$, UncRegistered\n    reading$, UncReading\n    student/(?P<id>[\\d]+)$, UncStudent\n    (?P<title>[\\w/\\-_.]*)/slides$, UncSlidesDisplay\n    (?P<title>[\\w/\\-_.]*)$, UncDocDisplay\n\nsuperuser/urls.py\n\n    $, AdminView\n    log, LogView\n    doc/(?P<doc>[\\w/\\-_.]+)$, DocView\n    material, MaterialView\n    test, TestView\n    users$, UsersView\n    surrogate/(?P<pk>\\d+)$, SurrogateView\n    database$, DatabaseView\n\ntasks/urls.py\n\n    add$, TaskCreate\n    url(r'(?P<pk>\\d+)/edit$, TaskUpdate\n    url(r'(?P<pk>\\d+)/delete$, TaskDelete\n    (?P<pk>\\d+)$, TaskDetail\n    import$, TaskImport\n    export$, TaskExport\n    $, TaskHome\n    summary$, TimeSummary\n    time$, MyTime\n    bad$, MissingDays\n    (?P<activity>[\\w\\d\\-\\.]*)$, TaskList\n\ntool/urls.py\n\n    user_add$, UserCreate\n    user_delete/(?P<pk>\\d+)$, UserDelete\n    user_detail/(?P<pk>\\d+)$, UserDetail\n    user_edit/(?P<pk>\\d+)$, UserEdit\n    user_list$, UserList\n",
            "name": "app-url",
            "output": "Find all the URLs for the app\n\nhammer/urls.py\n\n    robots.txt$, RedirectView.as_view(url=staticfiles_storage.url('robots.txt'),  permanent=True)\n    favicon.ico$, RedirectView.as_view(url=staticfiles_storage.url('favicon.ico'), permanent=True)\n    admin/, admin.site.urls\n    health/, include(health.urls)\n    health, include(health.urls)\n    life/, include(life.urls)\n    life, include(life.urls)\n    superuser/, include(superuser.urls)\n    superuser, include(superuser.urls)\n    task/, include(tasks.urls)\n    task, include(tasks.urls)\n    , include(tool.urls)\n    unc/, include(sensei.urls)\n    unc, include(sensei.urls)\n    , include(mybook.urls)\n\nhealth/urls.py\n\n    $, HealthView\n    history$, HealthList\n    url(r'(?P<pk>\\d+)$, HealthEdit)\n\nlife/urls.py\n\n    $, LifeView\n    experience$, ExperienceView\n    year/(?P<age>[-\\d]+)$, YearView\n    (?P<age>[-\\d]+)/(?P<aspect>[\\W\\w]+)/add$, LifeAdd\n    (?P<pk>\\d+)/edit$, LifeEdit\n\nmybook/urls.py\n\n    login, login, {'template_name': 'mybook_login.html'}\n    logout$, logout, {'next_page': '/login'}\n    booknotes/(?P<title>[\\w/\\-.]*)$, BookNotes\n    info/(?P<title>[\\w/\\-_.]*)$, MyBookPrivateDoc\n    seamanslog$, SeamansLog\n    spiritual/(?P<title>[\\w\\-_.]*)$, SpiritualSelect\n    (?P<title>[\\w/\\-_.]*)$, MyBookDocDisplay\n\nsensei/urls.py\n\n    register$, UncRegister\n    registered$, UncRegistered\n    reading$, UncReading\n    student/(?P<id>[\\d]+)$, UncStudent\n    (?P<title>[\\w/\\-_.]*)/slides$, UncSlidesDisplay\n    (?P<title>[\\w/\\-_.]*)$, UncDocDisplay\n\nsuperuser/urls.py\n\n    $, AdminView\n    log, LogView\n    doc/(?P<doc>[\\w/\\-_.]+)$, DocView\n    material, MaterialView\n    test, TestView\n    users$, UsersView\n    surrogate/(?P<pk>\\d+)$, SurrogateView\n    database$, DatabaseView\n\ntasks/urls.py\n\n    add$, TaskCreate\n    url(r'(?P<pk>\\d+)/edit$, TaskUpdate\n    url(r'(?P<pk>\\d+)/delete$, TaskDelete\n    (?P<pk>\\d+)$, TaskDetail\n    import$, TaskImport\n    export$, TaskExport\n    $, TaskHome\n    summary$, TimeSummary\n    time$, MyTime\n    bad$, MissingDays\n    (?P<activity>[\\w\\d\\-\\.]*)$, TaskList\n\ntool/urls.py\n\n    user_add$, UserCreate\n    user_delete/(?P<pk>\\d+)$, UserDelete\n    user_detail/(?P<pk>\\d+)$, UserDetail\n    user_edit/(?P<pk>\\d+)$, UserEdit\n    user_list$, UserList\n"
        },
        "model": "tool.test",
        "pk": 27
    },
    {
        "fields": {
            "expected": "\n--------------------------------------------------------------------------------\n                              **Scriptor Exception**\n--------------------------------------------------------------------------------\nScriptor Exception (tst ['output', 'archive-dirs'])\nTraceback (most recent call last):\n  File \"/Users/seaman/Sensei/tool/management/commands/scriptor.py\", line 50, in handle\n    tst_command(self, args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 55, in tst_command\n    tst_output(self,args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 160, in tst_output\n    self.stdout.write(t[0].output)\n  File \"/Users/seaman/Tools/env-python27/lib/python2.7/site-packages/django/core/management/base.py\", line 107, in write\n    if ending and not msg.endswith(ending):\nAttributeError: 'NoneType' object has no attribute 'endswith'\n",
            "name": "archive-dirs",
            "output": "\n--------------------------------------------------------------------------------\n                              **Scriptor Exception**\n--------------------------------------------------------------------------------\nScriptor Exception (tst ['output', 'archive-dirs'])\nTraceback (most recent call last):\n  File \"/Users/seaman/Sensei/tool/management/commands/scriptor.py\", line 50, in handle\n    tst_command(self, args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 55, in tst_command\n    tst_output(self,args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 160, in tst_output\n    self.stdout.write(t[0].output)\n  File \"/Users/seaman/Tools/env-python27/lib/python2.7/site-packages/django/core/management/base.py\", line 107, in write\n    if ending and not msg.endswith(ending):\nAttributeError: 'NoneType' object has no attribute 'endswith'\n"
        },
        "model": "tool.test",
        "pk": 28
    },
    {
        "fields": {
            "expected": "\n--------------------------------------------------------------------------------\n                              **Scriptor Exception**\n--------------------------------------------------------------------------------\nScriptor Exception (tst ['output', 'archive-files'])\nTraceback (most recent call last):\n  File \"/Users/seaman/Sensei/tool/management/commands/scriptor.py\", line 50, in handle\n    tst_command(self, args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 55, in tst_command\n    tst_output(self,args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 160, in tst_output\n    self.stdout.write(t[0].output)\n  File \"/Users/seaman/Tools/env-python27/lib/python2.7/site-packages/django/core/management/base.py\", line 107, in write\n    if ending and not msg.endswith(ending):\nAttributeError: 'NoneType' object has no attribute 'endswith'\n",
            "name": "archive-files",
            "output": "\n--------------------------------------------------------------------------------\n                              **Scriptor Exception**\n--------------------------------------------------------------------------------\nScriptor Exception (tst ['output', 'archive-files'])\nTraceback (most recent call last):\n  File \"/Users/seaman/Sensei/tool/management/commands/scriptor.py\", line 50, in handle\n    tst_command(self, args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 55, in tst_command\n    tst_output(self,args)\n  File \"/Users/seaman/Sensei/tool/tst.py\", line 160, in tst_output\n    self.stdout.write(t[0].output)\n  File \"/Users/seaman/Tools/env-python27/lib/python2.7/site-packages/django/core/management/base.py\", line 107, in write\n    if ending and not msg.endswith(ending):\nAttributeError: 'NoneType' object has no attribute 'endswith'\n"
        },
        "model": "tool.test",
        "pk": 29
    },
    {
        "fields": {
            "expected": "Closed NTSH.OPC",
            "name": "archive-nts",
            "output": "Closed NTSH.OPC"
        },
        "model": "tool.test",
        "pk": 30
    },
    {
        "fields": {
            "expected": "\turl = git@github.com:Mark-Seaman/SeamanTech.git\n\n\turl = git@github.com:Mark-Seaman/Hammer.git\n\n\turl = https://github.com/Mark-Seaman/GitBook-Html-Apps.git\n\n\turl = git@github.com:Mark-Seaman/Documents-2014.git\n\n\turl = git@github.com:Shrinking-World/MyBook-2017.git\n\n\turl = git@github.com:kokopelli314/hydronote.git\n\n\turl = git@github.com:Mark-Seaman/Documents-2015.git\n\n\turl = https://github.com/Mark-Seaman/MyBook-2018.git\n\n\turl = https://github.com/Mark-Seaman/UNC-2018-Fall.git\n\n\turl = git@github.com:Mark-Seaman/iPython.git\n\n\turl = https://github.com/Mark-Seaman/GitBook-PHP-Apps.git\n\n    url = git@github.com:Shrinking-World/Who2Hire.git\n[branch \"urls\"]\n\tmerge = refs/heads/urls\n\n    url = /Users/seaman/Archive/Git/Viewer\n\n\turl = https://github.com/Mark-Seaman/GitBook-Python-Apps.git\n\n    url = git@github.com:Mark-Seaman/Leverage.git\n\n\turl = git@github.com:Shrinking-World/workbench.git\n\n\turl = https://github.com/Mark-Seaman/GitBook-Teaching.git\n\n\turl = git@github.com:Shrinking-World/Documents-2017.git\n\n\turl = https://github.com/Mark-Seaman/Documents-2018.git\n\n\turl = git@github.com:Shrinking-World/Documents-2016.git\n\n\turl = git@github.com:Mark-Seaman/Keys.git\n\n\turl = git@github.com:Shrinking-World/UNC-2017.git\n\n\turl = https://github.com/Mark-Seaman/UNC-2018-Spring.git\n\n\turl = git@github.com:Mark-Seaman/Women2Women.git\n",
            "name": "archive-repo",
            "output": "\turl = git@github.com:Mark-Seaman/SeamanTech.git\n\n\turl = git@github.com:Mark-Seaman/Hammer.git\n\n\turl = https://github.com/Mark-Seaman/GitBook-Html-Apps.git\n\n\turl = git@github.com:Mark-Seaman/Documents-2014.git\n\n\turl = git@github.com:Shrinking-World/MyBook-2017.git\n\n\turl = git@github.com:kokopelli314/hydronote.git\n\n\turl = git@github.com:Mark-Seaman/Documents-2015.git\n\n\turl = https://github.com/Mark-Seaman/MyBook-2018.git\n\n\turl = https://github.com/Mark-Seaman/UNC-2018-Fall.git\n\n\turl = git@github.com:Mark-Seaman/iPython.git\n\n\turl = https://github.com/Mark-Seaman/GitBook-PHP-Apps.git\n\n    url = git@github.com:Shrinking-World/Who2Hire.git\n[branch \"urls\"]\n\tmerge = refs/heads/urls\n\n    url = /Users/seaman/Archive/Git/Viewer\n\n\turl = https://github.com/Mark-Seaman/GitBook-Python-Apps.git\n\n    url = git@github.com:Mark-Seaman/Leverage.git\n\n\turl = git@github.com:Shrinking-World/workbench.git\n\n\turl = https://github.com/Mark-Seaman/GitBook-Teaching.git\n\n\turl = git@github.com:Shrinking-World/Documents-2017.git\n\n\turl = https://github.com/Mark-Seaman/Documents-2018.git\n\n\turl = git@github.com:Shrinking-World/Documents-2016.git\n\n\turl = git@github.com:Mark-Seaman/Keys.git\n\n\turl = git@github.com:Shrinking-World/UNC-2017.git\n\n\turl = https://github.com/Mark-Seaman/UNC-2018-Spring.git\n\n\turl = git@github.com:Mark-Seaman/Women2Women.git\n"
        },
        "model": "tool.test",
        "pk": 31
    },
    {
        "fields": {
            "expected": "\nHourly Tasks\n\n\n          echo \"PATH=\" `path`\n          echo \"env=\" `env`\n          echo Python: `which python`\n          # git status\n          x tst\n          x tst list\n          x tst send\n      \n\nDaily Tasks\n\n\n          # x spiritual article\n          # x seamanslog article\n          x data backup\n          rm $p/log/django.log\n      \n",
            "name": "hourly-list",
            "output": "\nHourly Tasks\n\n\n          echo \"PATH=\" `path`\n          echo \"env=\" `env`\n          echo Python: `which python`\n          # git status\n          x tst\n          x tst list\n          x tst send\n      \n\nDaily Tasks\n\n\n          # x spiritual article\n          # x seamanslog article\n          x data backup\n          rm $p/log/django.log\n      \n"
        },
        "model": "tool.test",
        "pk": 32
    },
    {
        "fields": {
            "expected": "no output",
            "name": "hourly-show",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 33
    },
    {
        "fields": {
            "expected": "Log Length OK",
            "name": "log-length",
            "output": "Log Length OK"
        },
        "model": "tool.test",
        "pk": 34
    },
    {
        "fields": {
            "expected": "no output",
            "name": "ops-help",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 35
    },
    {
        "fields": {
            "expected": "Ops Command - production server\n\n        ops production ['server']\n\n        usage: x ops COMMAND [ARGS]\n\n        COMMAND:\n\n            command - execute a single command on the remote server\n            console - login to production\n            deploy  - push all changes to staging server\n            log     - show the log on the production server\n            restart - restart the web server\n            root    - show the root console\n            update  - push all files to remote server\n\n        \n",
            "name": "ops-server",
            "output": "Ops Command - production server\n\n        ops production ['server']\n\n        usage: x ops COMMAND [ARGS]\n\n        COMMAND:\n\n            command - execute a single command on the remote server\n            console - login to production\n            deploy  - push all changes to staging server\n            log     - show the log on the production server\n            restart - restart the web server\n            root    - show the root console\n            update  - push all files to remote server\n\n        \n"
        },
        "model": "tool.test",
        "pk": 36
    },
    {
        "fields": {
            "expected": "Ops Command - production type\n\n        ops production ['type']\n\n        usage: x ops COMMAND [ARGS]\n\n        COMMAND:\n\n            command - execute a single command on the remote server\n            console - login to production\n            deploy  - push all changes to staging server\n            log     - show the log on the production server\n            restart - restart the web server\n            root    - show the root console\n            update  - push all files to remote server\n\n        \n",
            "name": "ops-server-type",
            "output": "Ops Command - production type\n\n        ops production ['type']\n\n        usage: x ops COMMAND [ARGS]\n\n        COMMAND:\n\n            command - execute a single command on the remote server\n            console - login to production\n            deploy  - push all changes to staging server\n            log     - show the log on the production server\n            restart - restart the web server\n            root    - show the root console\n            update  - push all files to remote server\n\n        \n"
        },
        "model": "tool.test",
        "pk": 37
    },
    {
        "fields": {
            "expected": "Ops Command - production status\n\n        ops production ['status']\n\n        usage: x ops COMMAND [ARGS]\n\n        COMMAND:\n\n            command - execute a single command on the remote server\n            console - login to production\n            deploy  - push all changes to staging server\n            log     - show the log on the production server\n            restart - restart the web server\n            root    - show the root console\n            update  - push all files to remote server\n\n        \n",
            "name": "ops-status",
            "output": "Ops Command - production status\n\n        ops production ['status']\n\n        usage: x ops COMMAND [ARGS]\n\n        COMMAND:\n\n            command - execute a single command on the remote server\n            console - login to production\n            deploy  - push all changes to staging server\n            log     - show the log on the production server\n            restart - restart the web server\n            root    - show the root console\n            update  - push all files to remote server\n\n        \n"
        },
        "model": "tool.test",
        "pk": 38
    },
    {
        "fields": {
            "expected": "0  *  *  * *  ~/Projects/MyBook/bin/hourly 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n# 30 6  *  * * ~/Projects/MyBook/bin/daily 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n# 20 7  *  * 1 ~/Projects/MyBook/bin/weekly 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n# 10 10 1  * * ~/Projects/MyBook/bin/monthly 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n",
            "name": "system-cron",
            "output": "0  *  *  * *  ~/Projects/MyBook/bin/hourly 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n# 30 6  *  * * ~/Projects/MyBook/bin/daily 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n# 20 7  *  * 1 ~/Projects/MyBook/bin/weekly 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n# 10 10 1  * * ~/Projects/MyBook/bin/monthly 2>&1 > ~/Projects/MyBook/log/cron-errors.log\n"
        },
        "model": "tool.test",
        "pk": 39
    },
    {
        "fields": {
            "expected": "no output",
            "name": "system-disk-free",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 40
    },
    {
        "fields": {
            "expected": "no output",
            "name": "system-files-count",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 41
    },
    {
        "fields": {
            "expected": "Hostname: Marks-iMac.local",
            "name": "system-host",
            "output": "Hostname: Marks-iMac.local"
        },
        "model": "tool.test",
        "pk": 42
    },
    {
        "fields": {
            "expected": "no output",
            "name": "system-ip",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 43
    },
    {
        "fields": {
            "expected": "<h1 id=\"history-of-activity\">History of Activity</h1>\n<p><a href=\"Today\" class=\"uri\">Today</a></p>\n<h2 id=\"section\">2015</h2>\n<ul>\n<li><a href=\"2015-09\">September</a></li>\n<li><a href=\"2015-10\">October</a></li>\n<li><a href=\"2015-11\">November</a></li>\n<li><a href=\"2015-12\">December</a></li>\n</ul>\n<h2 id=\"section-1\">2016</h2>\n<ul>\n<li><a href=\"2016-01\">January</a></li>\n<li><a href=\"2016-02\">February</a></li>\n<li><a href=\"2016-03\">March</a></li>\n<li><a href=\"2016-04\">April</a></li>\n<li><a href=\"2016-05\">May</a></li>\n<li><a href=\"2016-06\">June</a></li>\n<li><a href=\"2016-07\">July</a></li>\n<li><a href=\"2016-08\">August</a></li>\n<li><a href=\"2016-09\">September</a></li>\n<li><a href=\"2016-10\">October</a></li>\n<li><a href=\"2016-11\">November</a></li>\n</ul>\n",
            "name": "system-pandoc",
            "output": "<h1 id=\"history-of-activity\">History of Activity</h1>\n<p><a href=\"Today\" class=\"uri\">Today</a></p>\n<h2 id=\"section\">2015</h2>\n<ul>\n<li><a href=\"2015-09\">September</a></li>\n<li><a href=\"2015-10\">October</a></li>\n<li><a href=\"2015-11\">November</a></li>\n<li><a href=\"2015-12\">December</a></li>\n</ul>\n<h2 id=\"section-1\">2016</h2>\n<ul>\n<li><a href=\"2016-01\">January</a></li>\n<li><a href=\"2016-02\">February</a></li>\n<li><a href=\"2016-03\">March</a></li>\n<li><a href=\"2016-04\">April</a></li>\n<li><a href=\"2016-05\">May</a></li>\n<li><a href=\"2016-06\">June</a></li>\n<li><a href=\"2016-07\">July</a></li>\n<li><a href=\"2016-08\">August</a></li>\n<li><a href=\"2016-09\">September</a></li>\n<li><a href=\"2016-10\">October</a></li>\n<li><a href=\"2016-11\">November</a></li>\n</ul>\n"
        },
        "model": "tool.test",
        "pk": 44
    },
    {
        "fields": {
            "expected": "shell(Python file list) --> 138 lines (should be between 140 and 160)",
            "name": "system-python-files",
            "output": "shell(Python file list) --> 137 lines (should be between 140 and 160)"
        },
        "model": "tool.test",
        "pk": 45
    },
    {
        "fields": {
            "expected": "sys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)",
            "name": "system-python-version",
            "output": "sys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)"
        },
        "model": "tool.test",
        "pk": 46
    },
    {
        "fields": {
            "expected": "/Users/seaman/Tools/env-python27/bin/python\n",
            "name": "system-python-virtualenv",
            "output": "/Users/seaman/Tools/env-python27/bin/python\n"
        },
        "model": "tool.test",
        "pk": 47
    },
    {
        "fields": {
            "expected": "\n        Command not found, seamanslog ['list']\n\n        usage: x cmd [args]\n\n        cmd\n\n            app         # Work with application code\n            booknotes   # Manage notes for reading\n            data        # Database scripting\n            doc         # Manage project documents\n            hourly      # Hourly command for maintence\n            hours       # Hours of invested time\n            log         # Manage logs\n            page        # Page Master app\n            ops         # Operations script\n            project     # Projects for clients\n            robot       # Web Robot using Selenium to fetch web pages\n            spiritual   # Spiritual Things subscriber list\n            software    # Work with software training materials\n            task        # Task Master\n            todo        # To do list command\n            tool        # Manage django tool scripts\n            tst         # Run tests with expected results\n            web         # Web pages\n            wordpress   # Work with wordpress server at Digital Ocean\n\n        Example: \n                 x doc list\n                 x tst run\n        \n",
            "name": "seamanslog-list",
            "output": "\n        Command not found, seamanslog ['list']\n\n        usage: x cmd [args]\n\n        cmd\n\n            app         # Work with application code\n            booknotes   # Manage notes for reading\n            data        # Database scripting\n            doc         # Manage project documents\n            hourly      # Hourly command for maintence\n            hours       # Hours of invested time\n            log         # Manage logs\n            page        # Page Master app\n            ops         # Operations script\n            project     # Projects for clients\n            robot       # Web Robot using Selenium to fetch web pages\n            spiritual   # Spiritual Things subscriber list\n            software    # Work with software training materials\n            task        # Task Master\n            todo        # To do list command\n            tool        # Manage django tool scripts\n            tst         # Run tests with expected results\n            web         # Web pages\n            wordpress   # Work with wordpress server at Digital Ocean\n\n        Example: \n                 x doc list\n                 x tst run\n        \n"
        },
        "model": "tool.test",
        "pk": 48
    },
    {
        "fields": {
            "expected": "shell(x seamanslog show) --> 32 lines (should be between 1000 and 3000)",
            "name": "seamanslog-show",
            "output": "shell(x seamanslog show) --> 32 lines (should be between 1000 and 3000)"
        },
        "model": "tool.test",
        "pk": 49
    },
    {
        "fields": {
            "expected": "\n        Command not found, seamanslog ['summary']\n\n        usage: x cmd [args]\n\n        cmd\n\n            app         # Work with application code\n            booknotes   # Manage notes for reading\n            data        # Database scripting\n            doc         # Manage project documents\n            hourly      # Hourly command for maintence\n            hours       # Hours of invested time\n            log         # Manage logs\n            page        # Page Master app\n            ops         # Operations script\n            project     # Projects for clients\n            robot       # Web Robot using Selenium to fetch web pages\n            spiritual   # Spiritual Things subscriber list\n            software    # Work with software training materials\n            task        # Task Master\n            todo        # To do list command\n            tool        # Manage django tool scripts\n            tst         # Run tests with expected results\n            web         # Web pages\n            wordpress   # Work with wordpress server at Digital Ocean\n\n        Example: \n                 x doc list\n                 x tst run\n        \n",
            "name": "seamanslog-summary",
            "output": "\n        Command not found, seamanslog ['summary']\n\n        usage: x cmd [args]\n\n        cmd\n\n            app         # Work with application code\n            booknotes   # Manage notes for reading\n            data        # Database scripting\n            doc         # Manage project documents\n            hourly      # Hourly command for maintence\n            hours       # Hours of invested time\n            log         # Manage logs\n            page        # Page Master app\n            ops         # Operations script\n            project     # Projects for clients\n            robot       # Web Robot using Selenium to fetch web pages\n            spiritual   # Spiritual Things subscriber list\n            software    # Work with software training materials\n            task        # Task Master\n            todo        # To do list command\n            tool        # Manage django tool scripts\n            tst         # Run tests with expected results\n            web         # Web pages\n            wordpress   # Work with wordpress server at Digital Ocean\n\n        Example: \n                 x doc list\n                 x tst run\n        \n"
        },
        "model": "tool.test",
        "pk": 50
    },
    {
        "fields": {
            "expected": "\n        Command not found, seamanslog ['words']\n\n        usage: x cmd [args]\n\n        cmd\n\n            app         # Work with application code\n            booknotes   # Manage notes for reading\n            data        # Database scripting\n            doc         # Manage project documents\n            hourly      # Hourly command for maintence\n            hours       # Hours of invested time\n            log         # Manage logs\n            page        # Page Master app\n            ops         # Operations script\n            project     # Projects for clients\n            robot       # Web Robot using Selenium to fetch web pages\n            spiritual   # Spiritual Things subscriber list\n            software    # Work with software training materials\n            task        # Task Master\n            todo        # To do list command\n            tool        # Manage django tool scripts\n            tst         # Run tests with expected results\n            web         # Web pages\n            wordpress   # Work with wordpress server at Digital Ocean\n\n        Example: \n                 x doc list\n                 x tst run\n        \n",
            "name": "seamanslog-words",
            "output": "\n        Command not found, seamanslog ['words']\n\n        usage: x cmd [args]\n\n        cmd\n\n            app         # Work with application code\n            booknotes   # Manage notes for reading\n            data        # Database scripting\n            doc         # Manage project documents\n            hourly      # Hourly command for maintence\n            hours       # Hours of invested time\n            log         # Manage logs\n            page        # Page Master app\n            ops         # Operations script\n            project     # Projects for clients\n            robot       # Web Robot using Selenium to fetch web pages\n            spiritual   # Spiritual Things subscriber list\n            software    # Work with software training materials\n            task        # Task Master\n            todo        # To do list command\n            tool        # Manage django tool scripts\n            tst         # Run tests with expected results\n            web         # Web pages\n            wordpress   # Work with wordpress server at Digital Ocean\n\n        Example: \n                 x doc list\n                 x tst run\n        \n"
        },
        "model": "tool.test",
        "pk": 51
    },
    {
        "fields": {
            "expected": "                                    Sleep   Weight      Eat  Exercise \n",
            "name": "health-list",
            "output": "                                    Sleep   Weight      Eat  Exercise \n"
        },
        "model": "tool.test",
        "pk": 52
    },
    {
        "fields": {
            "expected": "no output",
            "name": "health-score",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 53
    },
    {
        "fields": {
            "expected": "shell(x wordpress host) --> 13 lines (should be between 20 and 30)",
            "name": "wordpress-host",
            "output": "shell(x wordpress host) --> 13 lines (should be between 20 and 30)"
        },
        "model": "tool.test",
        "pk": 54
    },
    {
        "fields": {
            "expected": "wordpress list\nNo directory exists\n",
            "name": "wordpress-list",
            "output": "wordpress list\nNo directory exists\n"
        },
        "model": "tool.test",
        "pk": 55
    },
    {
        "fields": {
            "expected": "app-classes\napp-functions\napp-list\napp-settings\napp-show\napp-signature\napp-switches\napp-url\narchive-dirs\narchive-files\narchive-nts\narchive-repo\naspire-list\naspire-report\naspire-show\naspire-week\nbooknotes-lines\nbooknotes-list\ncss-mybook\ncss-slides\ncss-unc\ndata-files\ndata-migrate\ndata-save\ndata-tables\ndoc\ndoc-encoding\ndoc-file\ndoc-file-missing\ndoc-help\ndoc-render\ndoc-scan\ndoc-search\nhealth-list\nhealth-score\nhourly-list\nhourly-show\ni-list\nlog-length\nops-help\nops-server\nops-server-type\nops-status\npage-diff\npage-list\npage-sites\npage-text\nrobot-list\nrobot-results\nseamanslog-list\nseamanslog-show\nseamanslog-summary\nseamanslog-words\nsystem-cron\nsystem-disk-free\nsystem-files-count\nsystem-host\nsystem-ip\nsystem-pandoc\nsystem-python-files\nsystem-python-version\nsystem-python-virtualenv\ntext-agents\ntext-anchors\ntext-div\ntext-findall\ntext-format\ntext-functions\ntext-grep\ntext-help\ntext-links\ntext-markdown\ntext-match\ntext-no-match\ntext-outline\ntext-round-trip\ntext-select-lines\ntext-signatures\ntext-url\ntst\ntst-time\nunc-docs\nunc-files\nunc-site\nuser-list\nvc-pull\nvc-status\nwordpress-host\nwordpress-list\n",
            "name": "tst",
            "output": "app-classes\napp-functions\napp-list\napp-settings\napp-show\napp-signature\napp-switches\napp-url\narchive-dirs\narchive-files\narchive-nts\narchive-repo\naspire-list\naspire-report\naspire-show\naspire-week\nbooknotes-lines\nbooknotes-list\ncss-mybook\ncss-slides\ncss-unc\ndata-files\ndata-migrate\ndata-save\ndata-tables\ndoc\ndoc-encoding\ndoc-file\ndoc-file-missing\ndoc-help\ndoc-render\ndoc-scan\ndoc-search\nhealth-list\nhealth-score\nhourly-list\nhourly-show\ni-list\nlog-length\nops-help\nops-server\nops-server-type\nops-status\npage-diff\npage-list\npage-sites\npage-text\nrobot-list\nrobot-results\nseamanslog-list\nseamanslog-show\nseamanslog-summary\nseamanslog-words\nsystem-cron\nsystem-disk-free\nsystem-files-count\nsystem-host\nsystem-ip\nsystem-pandoc\nsystem-python-files\nsystem-python-version\nsystem-python-virtualenv\ntext-agents\ntext-anchors\ntext-div\ntext-findall\ntext-format\ntext-functions\ntext-grep\ntext-help\ntext-links\ntext-markdown\ntext-match\ntext-no-match\ntext-outline\ntext-round-trip\ntext-select-lines\ntext-signatures\ntext-url\ntst\ntst-time\nunc-docs\nunc-files\nunc-site\nuser-list\nvc-pull\nvc-status\nwordpress-host\nwordpress-list\n"
        },
        "model": "tool.test",
        "pk": 56
    },
    {
        "fields": {
            "expected": "Tue Jan 15 15:39:35 MST 2019\n",
            "name": "tst-time",
            "output": "Wed Jan 16 07:00:26 MST 2019\n"
        },
        "model": "tool.test",
        "pk": 57
    },
    {
        "fields": {
            "expected": "/*  ------------------------------\n    Colors\n------------------------------\n\nBlue            -- #2196F3\nGreen           -- #4caf50\nLight Green     -- #f0fff0\n\n*/\n\n/* ------------------------\n    Elements\n */\n\na {\n    color: green;\n    font-weight: bold;\n}\n\na:hover {\n    font-weight: bolder;\n    text-decoration: underline;\n}\n\nbody {\n    font-size: 18px;\n    color: black;\n}\n\nh1, h2, h3 {\n    margin: 20px 0px;\n    padding: 10px 0px;\n}\n\nh1 {\n    font-size: 32px;\n    color: #2196F3;\n}\n\nh2 {\n    color: green;\n    background-color: white;\n    border: 2px solid green;\n    text-align: center;\n    font-size: 24px;\n    margin-bottom: 20px;\n}\n\nh3 {\n    font-size: 20px;\n}\n\nheader {\n    color: white;\n    background-color: #0a0a0a;\n    padding: 0px;\n    margin: 0px;\n}\n\nheader a {\n    color: white;\n}\n\nheader a:hover {\n    font-weight: 900;\n}\n\nheader h1 {\n    color: yellow;\n    border: none;\n    font-size: 300%;\n    text-shadow: 2px 2px 5px black;\n    padding: 0px;\n    margin: 0px;\n}\n\nheader h2 {\n    color: white;\n    background-color: inherit;\n    border: none;\n    font-size: 150%;\n    text-align: left;\n    width: 100%;\n    text-shadow: 2px 2px 5px grey;\n}\n\nhr {\n    border: solid 1px green;\n}\n\ni {\n    padding: 0px;\n    margin: 10px;\n}\n\nimg {\n    max-width: 800px;\n    box-shadow: 2px 2px 5px gray;\n    border: 1px solid white;\n    margin: 2em;\n    padding: 2em;\n}\n\npre {\n    background-color: #f0fff0;\n    color: #444;\n}\n\ntextarea {\n    min-width: 80%;\n    width: 100%;\n    margin: 0em;\n    height: 20em;\n}\n\ntd {\n    min-width: 8em;\n    margin: 10px;\n}\n\nul {\n    margin-bottom: 1em;\n}\n\nul ul {\n    margin-bottom: 1em;\n}\n\n/* -----------------------------\n    Class\n*/\n\n.btn {\n    background-color: green;\n    /*border: 2px solid white;*/\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px gray;\n    color: white;\n    font-size: 18px;\n    font-weight: bolder;\n    margin: 5px;\n    padding: 5px;\n    text-align: center;\n    width: 150px;\n}\n\n.card {\n    border-radius: 10px;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.5);\n    padding: 20px;\n    /*max-width: 1000px;*/\n}\n\n.card-header h2 {\n    margin-bottom: 20px;\n}\n\n.footer {\n    margin: auto;\n    /*width: 50%;*/\n}\n\n.inset {\n    background-color: white;\n    box-shadow: -2px -2px 5px grey;\n    padding: 1em;\n    margin: 1em;\n}\n\n\n.logo {\n    border: none;\n    width: 220px;\n    height: 100px;\n    background: white url(\"/static/images/SWS_Globe_small.jpg\") no-repeat;\n    border-radius: 10px;\n    box-shadow: 2px 2px 5px gray;\n\n}\n\n\n.main-menu {\n    margin-top: 50px;\n}\n\n.panel {\n    background-color: #eeeeee;\n    box-shadow: 2px 2px 5px grey;\n    padding: 2em;\n}\n\n.show {\n    border: solid 1px yellow;\n    padding: 5px;\n}\n\n.task-notes {\n    background-color: #eeeeee;\n    box-shadow: 2px 2px 5px gray;\n}\n\n.user-btn {\n    background-color: inherit;\n    border: 2px solid white;\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px gray;\n    color: white;\n    /*margin: 5px;*/\n    /*padding: 5px;*/\n    text-align: center;\n    width: 150px;\n}\n\n.user-text * {\n    color: white;\n    padding: 5px;\n    margin: 5px;\n    font-size: 12px;\n}\n\n.user-text a {\n    color: white;\n    font-size: 18px;\n}\n\n.user-text a:hover {\n    color: yellow;\n    font-weight: bolder;\n}\n",
            "name": "css-mybook",
            "output": "/*  ------------------------------\n    Colors\n------------------------------\n\nBlue            -- #2196F3\nGreen           -- #4caf50\nLight Green     -- #f0fff0\n\n*/\n\n/* ------------------------\n    Elements\n */\n\na {\n    color: green;\n    font-weight: bold;\n}\n\na:hover {\n    font-weight: bolder;\n    text-decoration: underline;\n}\n\nbody {\n    font-size: 18px;\n    color: black;\n}\n\nh1, h2, h3 {\n    margin: 20px 0px;\n    padding: 10px 0px;\n}\n\nh1 {\n    font-size: 32px;\n    color: #2196F3;\n}\n\nh2 {\n    color: green;\n    background-color: white;\n    border: 2px solid green;\n    text-align: center;\n    font-size: 24px;\n    margin-bottom: 20px;\n}\n\nh3 {\n    font-size: 20px;\n}\n\nheader {\n    color: white;\n    background-color: #0a0a0a;\n    padding: 0px;\n    margin: 0px;\n}\n\nheader a {\n    color: white;\n}\n\nheader a:hover {\n    font-weight: 900;\n}\n\nheader h1 {\n    color: yellow;\n    border: none;\n    font-size: 300%;\n    text-shadow: 2px 2px 5px black;\n    padding: 0px;\n    margin: 0px;\n}\n\nheader h2 {\n    color: white;\n    background-color: inherit;\n    border: none;\n    font-size: 150%;\n    text-align: left;\n    width: 100%;\n    text-shadow: 2px 2px 5px grey;\n}\n\nhr {\n    border: solid 1px green;\n}\n\ni {\n    padding: 0px;\n    margin: 10px;\n}\n\nimg {\n    max-width: 800px;\n    box-shadow: 2px 2px 5px gray;\n    border: 1px solid white;\n    margin: 2em;\n    padding: 2em;\n}\n\npre {\n    background-color: #f0fff0;\n    color: #444;\n}\n\ntextarea {\n    min-width: 80%;\n    width: 100%;\n    margin: 0em;\n    height: 20em;\n}\n\ntd {\n    min-width: 8em;\n    margin: 10px;\n}\n\nul {\n    margin-bottom: 1em;\n}\n\nul ul {\n    margin-bottom: 1em;\n}\n\n/* -----------------------------\n    Class\n*/\n\n.btn {\n    background-color: green;\n    /*border: 2px solid white;*/\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px gray;\n    color: white;\n    font-size: 18px;\n    font-weight: bolder;\n    margin: 5px;\n    padding: 5px;\n    text-align: center;\n    width: 150px;\n}\n\n.card {\n    border-radius: 10px;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.5);\n    padding: 20px;\n    /*max-width: 1000px;*/\n}\n\n.card-header h2 {\n    margin-bottom: 20px;\n}\n\n.footer {\n    margin: auto;\n    /*width: 50%;*/\n}\n\n.inset {\n    background-color: white;\n    box-shadow: -2px -2px 5px grey;\n    padding: 1em;\n    margin: 1em;\n}\n\n\n.logo {\n    border: none;\n    width: 220px;\n    height: 100px;\n    background: white url(\"/static/images/SWS_Globe_small.jpg\") no-repeat;\n    border-radius: 10px;\n    box-shadow: 2px 2px 5px gray;\n\n}\n\n\n.main-menu {\n    margin-top: 50px;\n}\n\n.panel {\n    background-color: #eeeeee;\n    box-shadow: 2px 2px 5px grey;\n    padding: 2em;\n}\n\n.show {\n    border: solid 1px yellow;\n    padding: 5px;\n}\n\n.task-notes {\n    background-color: #eeeeee;\n    box-shadow: 2px 2px 5px gray;\n}\n\n.user-btn {\n    background-color: inherit;\n    border: 2px solid white;\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px gray;\n    color: white;\n    /*margin: 5px;*/\n    /*padding: 5px;*/\n    text-align: center;\n    width: 150px;\n}\n\n.user-text * {\n    color: white;\n    padding: 5px;\n    margin: 5px;\n    font-size: 12px;\n}\n\n.user-text a {\n    color: white;\n    font-size: 18px;\n}\n\n.user-text a:hover {\n    color: yellow;\n    font-weight: bolder;\n}\n"
        },
        "model": "tool.test",
        "pk": 58
    },
    {
        "fields": {
            "expected": "/* ------------------------------\n    Elements\n------------------------------*/\n\np {\n    color: #F6B018;\n}\n\n/* ------------------------------\n    Class\n------------------------------*/\n\n.reveal a {\n    color: #F6B018;\n    background-color: #0E3D65;\n    padding: 10px;\n    margin: 10px;\n    border: 2px solid #F6B018;\n    border-radius: 30px;\n}\n\n.reveal a:hover {\n    color: #0E3D65;\n    background-color: #F6B018;\n}\n\n.reveal h1 {\n    text-transform: none;\n    font-size: 150%;\n    color: #0E3D65;\n    background-color: #F6B018;\n    border: 2px solid #0E3D65;\n}\n\n.reveal h2 {\n    color: green;\n    background-color: #F6B018;\n    border: 2px solid #0E3D65;\n    text-align: center;\n    font-size: 200%;\n    margin: 10px 20px;\n    padding: 10px 20px;\n    box-shadow: 2px 2px 5px gray;\n}\n\n.reveal h3,\n.reveal h4 {\n    text-transform: none;\n    font-size: 120%;\n    color: #0E3D65;\n}\n\n.reveal section img {\n    border: none;\n    max-width: 600px;\n    box-shadow: none;\n    text-align: center;\n    max-width: 80%;\n    max-height: 80%;\n}\n\n.reveal li {\n    color: #0E3D65;\n    font-size: 90%;\n}\n\n.reveal li li {\n    color: #F6B018;\n}\n\n.reveal p {\n    color: green;\n}\n\n.reveal pre {\n    background-color: #eee;\n    color: #444;\n    margin: 10px 100px;\n}\n\n.right {\n    float: right;\n}\n\n",
            "name": "css-slides",
            "output": "/* ------------------------------\n    Elements\n------------------------------*/\n\np {\n    color: #F6B018;\n}\n\n/* ------------------------------\n    Class\n------------------------------*/\n\n.reveal a {\n    color: #F6B018;\n    background-color: #0E3D65;\n    padding: 10px;\n    margin: 10px;\n    border: 2px solid #F6B018;\n    border-radius: 30px;\n}\n\n.reveal a:hover {\n    color: #0E3D65;\n    background-color: #F6B018;\n}\n\n.reveal h1 {\n    text-transform: none;\n    font-size: 150%;\n    color: #0E3D65;\n    background-color: #F6B018;\n    border: 2px solid #0E3D65;\n}\n\n.reveal h2 {\n    color: green;\n    background-color: #F6B018;\n    border: 2px solid #0E3D65;\n    text-align: center;\n    font-size: 200%;\n    margin: 10px 20px;\n    padding: 10px 20px;\n    box-shadow: 2px 2px 5px gray;\n}\n\n.reveal h3,\n.reveal h4 {\n    text-transform: none;\n    font-size: 120%;\n    color: #0E3D65;\n}\n\n.reveal section img {\n    border: none;\n    max-width: 600px;\n    box-shadow: none;\n    text-align: center;\n    max-width: 80%;\n    max-height: 80%;\n}\n\n.reveal li {\n    color: #0E3D65;\n    font-size: 90%;\n}\n\n.reveal li li {\n    color: #F6B018;\n}\n\n.reveal p {\n    color: green;\n}\n\n.reveal pre {\n    background-color: #eee;\n    color: #444;\n    margin: 10px 100px;\n}\n\n.right {\n    float: right;\n}\n\n"
        },
        "model": "tool.test",
        "pk": 59
    },
    {
        "fields": {
            "expected": "Error:  File not found /Users/seaman/Sensei/static/css/sensei.css",
            "name": "css-unc",
            "output": "Error:  File not found /Users/seaman/Sensei/static/css/sensei.css"
        },
        "model": "tool.test",
        "pk": 60
    },
    {
        "fields": {
            "expected": "shell(x booknotes content) --> 2711 lines (should be between 1500 and 1600)",
            "name": "booknotes-lines",
            "output": "shell(x booknotes content) --> 2711 lines (should be between 1500 and 1600)"
        },
        "model": "tool.test",
        "pk": 61
    },
    {
        "fields": {
            "expected": "booknotes list\nGoodIdeas-quotes.html\nThinking-quotes.html\nNext100Years\nOriginals-quotes.html\nEQ\nEssentialism\nPresentOverPerfect\nExecution-quotes.html\nEssentialism-quote.html\nExecution\nTribeOfMentors-quotes.html\nIntegrity-quotes.html\nIndex\nIntegrity\nPrinciples-quotes.html\nSiteTitle\nActivateYourBrain-quotes.html\n",
            "name": "booknotes-list",
            "output": "booknotes list\nGoodIdeas-quotes.html\nThinking-quotes.html\nNext100Years\nOriginals-quotes.html\nEQ\nEssentialism\nPresentOverPerfect\nExecution-quotes.html\nEssentialism-quote.html\nExecution\nTribeOfMentors-quotes.html\nIntegrity-quotes.html\nIndex\nIntegrity\nPrinciples-quotes.html\nSiteTitle\nActivateYourBrain-quotes.html\n"
        },
        "model": "tool.test",
        "pk": 62
    },
    {
        "fields": {
            "expected": "no output",
            "name": "user-list",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 63
    },
    {
        "fields": {
            "expected": "no output",
            "name": "data-files",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 64
    },
    {
        "fields": {
            "expected": "Test is DISABLED",
            "name": "data-migrate",
            "output": "Test is DISABLED"
        },
        "model": "tool.test",
        "pk": 65
    },
    {
        "fields": {
            "expected": "Test is DISABLED",
            "name": "data-save",
            "output": "Test is DISABLED"
        },
        "model": "tool.test",
        "pk": 66
    },
    {
        "fields": {
            "expected": "Test is DISABLED",
            "name": "data-tables",
            "output": "Test is DISABLED"
        },
        "model": "tool.test",
        "pk": 67
    },
    {
        "fields": {
            "expected": "Ideas for Today (brainstorm --> decisions --> actions)\n\n-----------------------------------------\n\nWork\n\n    Plan\n        gather work in progress\n        use GTD\n        1000 goals\n        \n    Build\n        update Django and Python libraries\n        establish new standard programming context\n        limit log file\n        test private notes \n        create pycharm project for Rest\n        optimize ideas script\n\n    Learn\n        create Writers Notebook\n        continue life story\n        Organize evernotes\n\n    Teach\n        create classroom software for BACS 200\n        student registration\n        Select notes for writing topics\n        Seamans Guide to Python Apps\n\nPeople\n\n    follow up\n        Greg Brake\n        Chris Newby\n        Moe, Mehrgan\n\n    Church\n        application notes - thoughts on humility\n        perfectionism\n        overcoming negative feelings\n            turning on the light\n            receiving grace\n            Fear, Anger, Sadness, Shame\n        trust is confidence in character, competence, and compassion\n\nFun\n\n    capture regular TV series to watch\n    vinyl records\n\nGrow\n\n    prayer time\n    organize brain notes\n    think about emotional development\n    establish writing habit\n    analyze finances 2014-2018\n\n\n",
            "name": "i-list",
            "output": "Ideas for Today (brainstorm --> decisions --> actions)\n\n-----------------------------------------\n\nWork\n\n    Plan\n        gather work in progress\n        use GTD\n        1000 goals\n        \n    Build\n        update Django and Python libraries\n        establish new standard programming context\n        limit log file\n        test private notes \n        create pycharm project for Rest\n        optimize ideas script\n\n    Learn\n        create Writers Notebook\n        continue life story\n        Organize evernotes\n\n    Teach\n        create classroom software for BACS 200\n        student registration\n        Select notes for writing topics\n        Seamans Guide to Python Apps\n\nPeople\n\n    follow up\n        Greg Brake\n        Chris Newby\n        Moe, Mehrgan\n\n    Church\n        application notes - thoughts on humility\n        perfectionism\n        overcoming negative feelings\n            turning on the light\n            receiving grace\n            Fear, Anger, Sadness, Shame\n        trust is confidence in character, competence, and compassion\n\nFun\n\n    capture regular TV series to watch\n    vinyl records\n\nGrow\n\n    prayer time\n    organize brain notes\n    think about emotional development\n    establish writing habit\n    analyze finances 2014-2018\n\n\n"
        },
        "model": "tool.test",
        "pk": 68
    },
    {
        "fields": {
            "expected": "Ignore bad chars\n\na \"\nb \"\nc -\nd '\n\n\nProjects/\n\u251c\u2500\u2500 BACS200\n\u251c\u2500\u2500 Index\n\n\nConvert UTF8\n\na \"\nb \"\nc -\nd '\n\n\nProjects/\n BACS200\n Index\n\n\nConvert UTF16\n\na \nb \nc \nd \n\n\nProjects/\n BACS200\n Index\n\n",
            "name": "doc-encoding",
            "output": "Ignore bad chars\n\na \"\nb \"\nc -\nd '\n\n\nProjects/\n\u251c\u2500\u2500 BACS200\n\u251c\u2500\u2500 Index\n\n\nConvert UTF8\n\na \"\nb \"\nc -\nd '\n\n\nProjects/\n BACS200\n Index\n\n\nConvert UTF16\n\na \nb \nc \nd \n\n\nProjects/\n BACS200\n Index\n\n"
        },
        "model": "tool.test",
        "pk": 69
    },
    {
        "fields": {
            "expected": "No file, Test/Missing",
            "name": "doc-file-missing",
            "output": "No file, Test/Missing"
        },
        "model": "tool.test",
        "pk": 70
    },
    {
        "fields": {
            "expected": "no output",
            "name": "doc-file",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 71
    },
    {
        "fields": {
            "expected": "no output",
            "name": "doc-help",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 72
    },
    {
        "fields": {
            "expected": "Not your time 15:00",
            "name": "doc-render",
            "output": "Not your time 15:00"
        },
        "model": "tool.test",
        "pk": 73
    },
    {
        "fields": {
            "expected": "doc_encoding_test is DISABLED",
            "name": "doc-scan",
            "output": "doc_encoding_test is DISABLED"
        },
        "model": "tool.test",
        "pk": 74
    },
    {
        "fields": {
            "expected": "no output",
            "name": "doc-search",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 75
    },
    {
        "fields": {
            "expected": "no output",
            "name": "doc",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 76
    },
    {
        "fields": {
            "expected": "who2hire.us\napp.who2hire.us\napp.who2hire.us/login\napp.who2hire.us/opening_list\nmybookonline.org/software/Leverage/Index\nmybookonline.org/aspire\nmybookonline.org/login\nmybookonline.org/aspire/Index\nmybookonline.org/aspire/MyBook/Index\nshrinking-world.com\nseamansguide.com\nmarkseaman.org\nmarkseaman.info\nmarkseaman.info/login\nmarkseaman.info/task/time\nspiritual-things.org/spiritual/bible/Jer_17_7\n",
            "name": "robot-list",
            "output": "who2hire.us\napp.who2hire.us\napp.who2hire.us/login\napp.who2hire.us/opening_list\nmybookonline.org/software/Leverage/Index\nmybookonline.org/aspire\nmybookonline.org/login\nmybookonline.org/aspire/Index\nmybookonline.org/aspire/MyBook/Index\nshrinking-world.com\nseamansguide.com\nmarkseaman.org\nmarkseaman.info\nmarkseaman.info/login\nmarkseaman.info/task/time\nspiritual-things.org/spiritual/bible/Jer_17_7\n"
        },
        "model": "tool.test",
        "pk": 77
    },
    {
        "fields": {
            "expected": "\n",
            "name": "robot-results",
            "output": "\n"
        },
        "model": "tool.test",
        "pk": 78
    },
    {
        "fields": {
            "expected": "files(/Users/seaman/Sensei/Documents/sensei) --> 1 files (should be between 57 and 57)",
            "name": "unc-docs",
            "output": "files(/Users/seaman/Sensei/Documents/sensei) --> 1 files (should be between 57 and 57)"
        },
        "model": "tool.test",
        "pk": 79
    },
    {
        "fields": {
            "expected": "no output",
            "name": "unc-files",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 80
    },
    {
        "fields": {
            "expected": "shell(curl -s https://shrinking-world.com/sensei/bacs200/02) --> 61 lines (should be between 320 and 343)",
            "name": "unc-site",
            "output": "shell(curl -s https://shrinking-world.com/sensei/bacs200/02) --> 61 lines (should be between 320 and 343)"
        },
        "model": "tool.test",
        "pk": 81
    },
    {
        "fields": {
            "expected": "shell(x aspire list) --> 32 lines (should be between 250 and 500)",
            "name": "aspire-list",
            "output": "shell(x aspire list) --> 32 lines (should be between 250 and 500)"
        },
        "model": "tool.test",
        "pk": 82
    },
    {
        "fields": {
            "expected": "shell(x aspire report) --> 32 lines (should be between 2 and 2)",
            "name": "aspire-report",
            "output": "shell(x aspire report) --> 32 lines (should be between 2 and 2)"
        },
        "model": "tool.test",
        "pk": 83
    },
    {
        "fields": {
            "expected": "shell(x aspire show) --> 32 lines (should be between 10 and 20)",
            "name": "aspire-show",
            "output": "shell(x aspire show) --> 32 lines (should be between 10 and 20)"
        },
        "model": "tool.test",
        "pk": 84
    },
    {
        "fields": {
            "expected": "shell(x aspire week) --> 32 lines (should be between 15 and 21)",
            "name": "aspire-week",
            "output": "shell(x aspire week) --> 32 lines (should be between 15 and 21)"
        },
        "model": "tool.test",
        "pk": 85
    },
    {
        "fields": {
            "expected": "no output",
            "name": "page-diff",
            "output": "no output"
        },
        "model": "tool.test",
        "pk": 86
    },
    {
        "fields": {
            "expected": "shell(x page list) --> 2 lines (should be between 18 and 30)",
            "name": "page-list",
            "output": "shell(x page list) --> 2 lines (should be between 18 and 30)"
        },
        "model": "tool.test",
        "pk": 87
    },
    {
        "fields": {
            "expected": "shell(curl -s https://markseaman.info) --> 254 lines (should be between 195 and 250)\nOK - https://markseaman.org\nOK - https://seamansguide.com\nOK - https://seamanslog.com\nOK - https://shrinking-world.com\nOK - https://spiritual-things.org\nOK - https://who2hire.us\nshell(curl -s https://app.who2hire.us/admin) --> 1 lines (should be between 324 and 324)",
            "name": "page-sites",
            "output": "shell(curl -s https://markseaman.info) --> 254 lines (should be between 195 and 250)\nOK - https://markseaman.org\nOK - https://seamansguide.com\nOK - https://seamanslog.com\nOK - https://shrinking-world.com\nOK - https://spiritual-things.org\nOK - https://who2hire.us\nshell(curl -s https://app.who2hire.us/admin) --> 1 lines (should be between 324 and 324)"
        },
        "model": "tool.test",
        "pk": 88
    },
    {
        "fields": {
            "expected": "shell(x page text all) --> 1 lines (should be between 400 and 1000)",
            "name": "page-text",
            "output": "shell(x page text all) --> 1 lines (should be between 400 and 1000)"
        },
        "model": "tool.test",
        "pk": 89
    }
]
